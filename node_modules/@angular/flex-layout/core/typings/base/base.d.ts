/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { ElementRef, OnDestroy, SimpleChanges, OnChanges } from '@angular/core';
import { StyleDefinition, StyleUtils } from '../style-utils/style-utils';
import { ResponsiveActivation } from '../responsive-activation/responsive-activation';
import { MediaMonitor } from '../media-monitor/media-monitor';
import { MediaQuerySubscriber } from '../media-change';
/** Abstract base class for the Layout API styling directives. */
import * as ɵngcc0 from '@angular/core';
export declare abstract class BaseDirective implements OnDestroy, OnChanges {
    protected _mediaMonitor: MediaMonitor;
    protected _elementRef: ElementRef;
    protected _styler: StyleUtils;
    readonly hasMediaQueryListener: boolean;
    /**
     * Imperatively determine the current activated [input] value;
     * if called before ngOnInit() this will return `undefined`
     */
    /**
    * Change the currently activated input value and force-update
    * the injected CSS (by-passing change detection).
    *
    * NOTE: Only the currently activated input value will be modified;
    *       other input values will NOT be affected.
    */
    activatedValue: string | number;
    protected constructor(_mediaMonitor: MediaMonitor, _elementRef: ElementRef, _styler: StyleUtils);
    /**
     * Does this directive have 1 or more responsive keys defined
     * Note: we exclude the 'baseKey' key (which is NOT considered responsive)
     */
    hasResponsiveAPI(baseKey: string): boolean;
    /**
     * Use post-component-initialization event to perform extra
     * querying such as computed Display style
     */
    ngOnInit(): void;
    ngOnChanges(change: SimpleChanges): void;
    ngOnDestroy(): void;
    /** Access to host element's parent DOM node */
    protected readonly parentElement: any;
    protected readonly nativeElement: HTMLElement;
    /** Access the current value (if any) of the @Input property */
    protected _queryInput(key: string): any;
    /**
     * Was the directive's default selector used ?
     * If not, use the fallback value!
     */
    protected _getDefaultVal(key: string, fallbackVal: any): string | boolean;
    /**
     * Quick accessor to the current HTMLElement's `display` style
     * Note: this allows us to preserve the original style
     * and optional restore it when the mediaQueries deactivate
     */
    protected _getDisplayStyle(source?: HTMLElement): string;
    /** Quick accessor to raw attribute value on the target DOM element */
    protected _getAttributeValue(attribute: string, source?: HTMLElement): string;
    /**
     * Determine the DOM element's Flexbox flow (flex-direction).
     *
     * Check inline style first then check computed (stylesheet) style.
     * And optionally add the flow value to element's inline style.
     */
    protected _getFlexFlowDirection(target: HTMLElement, addIfMissing?: boolean): string;
    /** Applies styles given via string pair or object map to the directive element */
    protected _applyStyleToElement(style: StyleDefinition, value?: string | number, element?: HTMLElement): void;
    /** Applies styles given via string pair or object map to the directive's element */
    protected _applyStyleToElements(style: StyleDefinition, elements: HTMLElement[]): void;
    /**
     *  Save the property value; which may be a complex object.
     *  Complex objects support property chains
     */
    protected _cacheInput(key?: string, source?: any): void;
    /**
     *  Build a ResponsiveActivation object used to manage subscriptions to mediaChange notifications
     *  and intelligent lookup of the directive's property value that corresponds to that mediaQuery
     *  (or closest match).
     */
    protected _listenForMediaQueryChanges(key: string, defaultValue: any, onMediaQueryChange: MediaQuerySubscriber): ResponsiveActivation;
    /** Special accessor to query for all child 'element' nodes regardless of type, class, etc */
    protected readonly childrenNodes: any[];
    /** Fast validator for presence of attribute on the host element */
    protected hasKeyValue(key: string): boolean;
    protected readonly hasInitialized: boolean;
    /** MediaQuery Activation Tracker */
    protected _mqActivation?: ResponsiveActivation;
    /** Dictionary of input keys with associated values */
    protected _inputMap: {
        [key: string]: any;
    };
    /**
     * Has the `ngOnInit()` method fired
     *
     * Used to allow *ngFor tasks to finish and support queries like
     * getComputedStyle() during ngOnInit().
     */
    protected _hasInitialized: boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<BaseDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<BaseDirective, never, never, {}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS5kLnRzIiwic291cmNlcyI6WyJiYXNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5pbXBvcnQgeyBFbGVtZW50UmVmLCBPbkRlc3Ryb3ksIFNpbXBsZUNoYW5nZXMsIE9uQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3R5bGVEZWZpbml0aW9uLCBTdHlsZVV0aWxzIH0gZnJvbSAnLi4vc3R5bGUtdXRpbHMvc3R5bGUtdXRpbHMnO1xuaW1wb3J0IHsgUmVzcG9uc2l2ZUFjdGl2YXRpb24gfSBmcm9tICcuLi9yZXNwb25zaXZlLWFjdGl2YXRpb24vcmVzcG9uc2l2ZS1hY3RpdmF0aW9uJztcbmltcG9ydCB7IE1lZGlhTW9uaXRvciB9IGZyb20gJy4uL21lZGlhLW1vbml0b3IvbWVkaWEtbW9uaXRvcic7XG5pbXBvcnQgeyBNZWRpYVF1ZXJ5U3Vic2NyaWJlciB9IGZyb20gJy4uL21lZGlhLWNoYW5nZSc7XG4vKiogQWJzdHJhY3QgYmFzZSBjbGFzcyBmb3IgdGhlIExheW91dCBBUEkgc3R5bGluZyBkaXJlY3RpdmVzLiAqL1xuZXhwb3J0IGRlY2xhcmUgYWJzdHJhY3QgY2xhc3MgQmFzZURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uRGVzdHJveSwgT25DaGFuZ2VzIHtcbiAgICBwcm90ZWN0ZWQgX21lZGlhTW9uaXRvcjogTWVkaWFNb25pdG9yO1xuICAgIHByb3RlY3RlZCBfZWxlbWVudFJlZjogRWxlbWVudFJlZjtcbiAgICBwcm90ZWN0ZWQgX3N0eWxlcjogU3R5bGVVdGlscztcbiAgICByZWFkb25seSBoYXNNZWRpYVF1ZXJ5TGlzdGVuZXI6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogSW1wZXJhdGl2ZWx5IGRldGVybWluZSB0aGUgY3VycmVudCBhY3RpdmF0ZWQgW2lucHV0XSB2YWx1ZTtcbiAgICAgKiBpZiBjYWxsZWQgYmVmb3JlIG5nT25Jbml0KCkgdGhpcyB3aWxsIHJldHVybiBgdW5kZWZpbmVkYFxuICAgICAqL1xuICAgIC8qKlxuICAgICogQ2hhbmdlIHRoZSBjdXJyZW50bHkgYWN0aXZhdGVkIGlucHV0IHZhbHVlIGFuZCBmb3JjZS11cGRhdGVcbiAgICAqIHRoZSBpbmplY3RlZCBDU1MgKGJ5LXBhc3NpbmcgY2hhbmdlIGRldGVjdGlvbikuXG4gICAgKlxuICAgICogTk9URTogT25seSB0aGUgY3VycmVudGx5IGFjdGl2YXRlZCBpbnB1dCB2YWx1ZSB3aWxsIGJlIG1vZGlmaWVkO1xuICAgICogICAgICAgb3RoZXIgaW5wdXQgdmFsdWVzIHdpbGwgTk9UIGJlIGFmZmVjdGVkLlxuICAgICovXG4gICAgYWN0aXZhdGVkVmFsdWU6IHN0cmluZyB8IG51bWJlcjtcbiAgICBwcm90ZWN0ZWQgY29uc3RydWN0b3IoX21lZGlhTW9uaXRvcjogTWVkaWFNb25pdG9yLCBfZWxlbWVudFJlZjogRWxlbWVudFJlZiwgX3N0eWxlcjogU3R5bGVVdGlscyk7XG4gICAgLyoqXG4gICAgICogRG9lcyB0aGlzIGRpcmVjdGl2ZSBoYXZlIDEgb3IgbW9yZSByZXNwb25zaXZlIGtleXMgZGVmaW5lZFxuICAgICAqIE5vdGU6IHdlIGV4Y2x1ZGUgdGhlICdiYXNlS2V5JyBrZXkgKHdoaWNoIGlzIE5PVCBjb25zaWRlcmVkIHJlc3BvbnNpdmUpXG4gICAgICovXG4gICAgaGFzUmVzcG9uc2l2ZUFQSShiYXNlS2V5OiBzdHJpbmcpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFVzZSBwb3N0LWNvbXBvbmVudC1pbml0aWFsaXphdGlvbiBldmVudCB0byBwZXJmb3JtIGV4dHJhXG4gICAgICogcXVlcnlpbmcgc3VjaCBhcyBjb21wdXRlZCBEaXNwbGF5IHN0eWxlXG4gICAgICovXG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2U6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgLyoqIEFjY2VzcyB0byBob3N0IGVsZW1lbnQncyBwYXJlbnQgRE9NIG5vZGUgKi9cbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgcGFyZW50RWxlbWVudDogYW55O1xuICAgIHByb3RlY3RlZCByZWFkb25seSBuYXRpdmVFbGVtZW50OiBIVE1MRWxlbWVudDtcbiAgICAvKiogQWNjZXNzIHRoZSBjdXJyZW50IHZhbHVlIChpZiBhbnkpIG9mIHRoZSBASW5wdXQgcHJvcGVydHkgKi9cbiAgICBwcm90ZWN0ZWQgX3F1ZXJ5SW5wdXQoa2V5OiBzdHJpbmcpOiBhbnk7XG4gICAgLyoqXG4gICAgICogV2FzIHRoZSBkaXJlY3RpdmUncyBkZWZhdWx0IHNlbGVjdG9yIHVzZWQgP1xuICAgICAqIElmIG5vdCwgdXNlIHRoZSBmYWxsYmFjayB2YWx1ZSFcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgX2dldERlZmF1bHRWYWwoa2V5OiBzdHJpbmcsIGZhbGxiYWNrVmFsOiBhbnkpOiBzdHJpbmcgfCBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFF1aWNrIGFjY2Vzc29yIHRvIHRoZSBjdXJyZW50IEhUTUxFbGVtZW50J3MgYGRpc3BsYXlgIHN0eWxlXG4gICAgICogTm90ZTogdGhpcyBhbGxvd3MgdXMgdG8gcHJlc2VydmUgdGhlIG9yaWdpbmFsIHN0eWxlXG4gICAgICogYW5kIG9wdGlvbmFsIHJlc3RvcmUgaXQgd2hlbiB0aGUgbWVkaWFRdWVyaWVzIGRlYWN0aXZhdGVcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgX2dldERpc3BsYXlTdHlsZShzb3VyY2U/OiBIVE1MRWxlbWVudCk6IHN0cmluZztcbiAgICAvKiogUXVpY2sgYWNjZXNzb3IgdG8gcmF3IGF0dHJpYnV0ZSB2YWx1ZSBvbiB0aGUgdGFyZ2V0IERPTSBlbGVtZW50ICovXG4gICAgcHJvdGVjdGVkIF9nZXRBdHRyaWJ1dGVWYWx1ZShhdHRyaWJ1dGU6IHN0cmluZywgc291cmNlPzogSFRNTEVsZW1lbnQpOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lIHRoZSBET00gZWxlbWVudCdzIEZsZXhib3ggZmxvdyAoZmxleC1kaXJlY3Rpb24pLlxuICAgICAqXG4gICAgICogQ2hlY2sgaW5saW5lIHN0eWxlIGZpcnN0IHRoZW4gY2hlY2sgY29tcHV0ZWQgKHN0eWxlc2hlZXQpIHN0eWxlLlxuICAgICAqIEFuZCBvcHRpb25hbGx5IGFkZCB0aGUgZmxvdyB2YWx1ZSB0byBlbGVtZW50J3MgaW5saW5lIHN0eWxlLlxuICAgICAqL1xuICAgIHByb3RlY3RlZCBfZ2V0RmxleEZsb3dEaXJlY3Rpb24odGFyZ2V0OiBIVE1MRWxlbWVudCwgYWRkSWZNaXNzaW5nPzogYm9vbGVhbik6IHN0cmluZztcbiAgICAvKiogQXBwbGllcyBzdHlsZXMgZ2l2ZW4gdmlhIHN0cmluZyBwYWlyIG9yIG9iamVjdCBtYXAgdG8gdGhlIGRpcmVjdGl2ZSBlbGVtZW50ICovXG4gICAgcHJvdGVjdGVkIF9hcHBseVN0eWxlVG9FbGVtZW50KHN0eWxlOiBTdHlsZURlZmluaXRpb24sIHZhbHVlPzogc3RyaW5nIHwgbnVtYmVyLCBlbGVtZW50PzogSFRNTEVsZW1lbnQpOiB2b2lkO1xuICAgIC8qKiBBcHBsaWVzIHN0eWxlcyBnaXZlbiB2aWEgc3RyaW5nIHBhaXIgb3Igb2JqZWN0IG1hcCB0byB0aGUgZGlyZWN0aXZlJ3MgZWxlbWVudCAqL1xuICAgIHByb3RlY3RlZCBfYXBwbHlTdHlsZVRvRWxlbWVudHMoc3R5bGU6IFN0eWxlRGVmaW5pdGlvbiwgZWxlbWVudHM6IEhUTUxFbGVtZW50W10pOiB2b2lkO1xuICAgIC8qKlxuICAgICAqICBTYXZlIHRoZSBwcm9wZXJ0eSB2YWx1ZTsgd2hpY2ggbWF5IGJlIGEgY29tcGxleCBvYmplY3QuXG4gICAgICogIENvbXBsZXggb2JqZWN0cyBzdXBwb3J0IHByb3BlcnR5IGNoYWluc1xuICAgICAqL1xuICAgIHByb3RlY3RlZCBfY2FjaGVJbnB1dChrZXk/OiBzdHJpbmcsIHNvdXJjZT86IGFueSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogIEJ1aWxkIGEgUmVzcG9uc2l2ZUFjdGl2YXRpb24gb2JqZWN0IHVzZWQgdG8gbWFuYWdlIHN1YnNjcmlwdGlvbnMgdG8gbWVkaWFDaGFuZ2Ugbm90aWZpY2F0aW9uc1xuICAgICAqICBhbmQgaW50ZWxsaWdlbnQgbG9va3VwIG9mIHRoZSBkaXJlY3RpdmUncyBwcm9wZXJ0eSB2YWx1ZSB0aGF0IGNvcnJlc3BvbmRzIHRvIHRoYXQgbWVkaWFRdWVyeVxuICAgICAqICAob3IgY2xvc2VzdCBtYXRjaCkuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIF9saXN0ZW5Gb3JNZWRpYVF1ZXJ5Q2hhbmdlcyhrZXk6IHN0cmluZywgZGVmYXVsdFZhbHVlOiBhbnksIG9uTWVkaWFRdWVyeUNoYW5nZTogTWVkaWFRdWVyeVN1YnNjcmliZXIpOiBSZXNwb25zaXZlQWN0aXZhdGlvbjtcbiAgICAvKiogU3BlY2lhbCBhY2Nlc3NvciB0byBxdWVyeSBmb3IgYWxsIGNoaWxkICdlbGVtZW50JyBub2RlcyByZWdhcmRsZXNzIG9mIHR5cGUsIGNsYXNzLCBldGMgKi9cbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgY2hpbGRyZW5Ob2RlczogYW55W107XG4gICAgLyoqIEZhc3QgdmFsaWRhdG9yIGZvciBwcmVzZW5jZSBvZiBhdHRyaWJ1dGUgb24gdGhlIGhvc3QgZWxlbWVudCAqL1xuICAgIHByb3RlY3RlZCBoYXNLZXlWYWx1ZShrZXk6IHN0cmluZyk6IGJvb2xlYW47XG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGhhc0luaXRpYWxpemVkOiBib29sZWFuO1xuICAgIC8qKiBNZWRpYVF1ZXJ5IEFjdGl2YXRpb24gVHJhY2tlciAqL1xuICAgIHByb3RlY3RlZCBfbXFBY3RpdmF0aW9uPzogUmVzcG9uc2l2ZUFjdGl2YXRpb247XG4gICAgLyoqIERpY3Rpb25hcnkgb2YgaW5wdXQga2V5cyB3aXRoIGFzc29jaWF0ZWQgdmFsdWVzICovXG4gICAgcHJvdGVjdGVkIF9pbnB1dE1hcDoge1xuICAgICAgICBba2V5OiBzdHJpbmddOiBhbnk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBIYXMgdGhlIGBuZ09uSW5pdCgpYCBtZXRob2QgZmlyZWRcbiAgICAgKlxuICAgICAqIFVzZWQgdG8gYWxsb3cgKm5nRm9yIHRhc2tzIHRvIGZpbmlzaCBhbmQgc3VwcG9ydCBxdWVyaWVzIGxpa2VcbiAgICAgKiBnZXRDb21wdXRlZFN0eWxlKCkgZHVyaW5nIG5nT25Jbml0KCkuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIF9oYXNJbml0aWFsaXplZDogYm9vbGVhbjtcbn1cbiJdfQ==