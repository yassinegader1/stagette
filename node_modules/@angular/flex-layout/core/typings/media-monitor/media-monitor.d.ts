import { Observable } from 'rxjs';
import { BreakPoint } from '../breakpoints/break-point';
import { BreakPointRegistry } from '../breakpoints/break-point-registry';
import { MatchMedia } from '../match-media/match-media';
import { MediaChange } from '../media-change';
/**
 * MediaMonitor uses the MatchMedia service to observe mediaQuery changes (both activations and
 * deactivations). These changes are are published as MediaChange notifications.
 *
 * Note: all notifications will be performed within the
 * ng Zone to trigger change detections and component updates.
 *
 * It is the MediaMonitor that:
 *  - auto registers all known breakpoints
 *  - injects alias information into each raw MediaChange event
 *  - provides accessor to the currently active BreakPoint
 *  - publish list of overlapping BreakPoint(s); used by ResponsiveActivation
 */
import * as ɵngcc0 from '@angular/core';
export declare class MediaMonitor {
    private _breakpoints;
    private _matchMedia;
    constructor(_breakpoints: BreakPointRegistry, _matchMedia: MatchMedia);
    /**
     * Read-only accessor to the list of breakpoints configured in the BreakPointRegistry provider
     */
    readonly breakpoints: BreakPoint[];
    readonly activeOverlaps: BreakPoint[];
    readonly active: BreakPoint | null;
    /**
     * For the specified mediaQuery alias, is the mediaQuery range active?
     */
    isActive(alias: string): boolean;
    /**
     * External observers can watch for all (or a specific) mql changes.
     * If specific breakpoint is observed, only return *activated* events
     * otherwise return all events for BOTH activated + deactivated changes.
     */
    observe(alias?: string): Observable<MediaChange>;
    /**
     * Immediate calls to matchMedia() to establish listeners
     * and prepare for immediate subscription notifications
     */
    private _registerBreakpoints;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MediaMonitor, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<MediaMonitor>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVkaWEtbW9uaXRvci5kLnRzIiwic291cmNlcyI6WyJtZWRpYS1tb25pdG9yLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEJyZWFrUG9pbnQgfSBmcm9tICcuLi9icmVha3BvaW50cy9icmVhay1wb2ludCc7XG5pbXBvcnQgeyBCcmVha1BvaW50UmVnaXN0cnkgfSBmcm9tICcuLi9icmVha3BvaW50cy9icmVhay1wb2ludC1yZWdpc3RyeSc7XG5pbXBvcnQgeyBNYXRjaE1lZGlhIH0gZnJvbSAnLi4vbWF0Y2gtbWVkaWEvbWF0Y2gtbWVkaWEnO1xuaW1wb3J0IHsgTWVkaWFDaGFuZ2UgfSBmcm9tICcuLi9tZWRpYS1jaGFuZ2UnO1xuLyoqXG4gKiBNZWRpYU1vbml0b3IgdXNlcyB0aGUgTWF0Y2hNZWRpYSBzZXJ2aWNlIHRvIG9ic2VydmUgbWVkaWFRdWVyeSBjaGFuZ2VzIChib3RoIGFjdGl2YXRpb25zIGFuZFxuICogZGVhY3RpdmF0aW9ucykuIFRoZXNlIGNoYW5nZXMgYXJlIGFyZSBwdWJsaXNoZWQgYXMgTWVkaWFDaGFuZ2Ugbm90aWZpY2F0aW9ucy5cbiAqXG4gKiBOb3RlOiBhbGwgbm90aWZpY2F0aW9ucyB3aWxsIGJlIHBlcmZvcm1lZCB3aXRoaW4gdGhlXG4gKiBuZyBab25lIHRvIHRyaWdnZXIgY2hhbmdlIGRldGVjdGlvbnMgYW5kIGNvbXBvbmVudCB1cGRhdGVzLlxuICpcbiAqIEl0IGlzIHRoZSBNZWRpYU1vbml0b3IgdGhhdDpcbiAqICAtIGF1dG8gcmVnaXN0ZXJzIGFsbCBrbm93biBicmVha3BvaW50c1xuICogIC0gaW5qZWN0cyBhbGlhcyBpbmZvcm1hdGlvbiBpbnRvIGVhY2ggcmF3IE1lZGlhQ2hhbmdlIGV2ZW50XG4gKiAgLSBwcm92aWRlcyBhY2Nlc3NvciB0byB0aGUgY3VycmVudGx5IGFjdGl2ZSBCcmVha1BvaW50XG4gKiAgLSBwdWJsaXNoIGxpc3Qgb2Ygb3ZlcmxhcHBpbmcgQnJlYWtQb2ludChzKTsgdXNlZCBieSBSZXNwb25zaXZlQWN0aXZhdGlvblxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBNZWRpYU1vbml0b3Ige1xuICAgIHByaXZhdGUgX2JyZWFrcG9pbnRzO1xuICAgIHByaXZhdGUgX21hdGNoTWVkaWE7XG4gICAgY29uc3RydWN0b3IoX2JyZWFrcG9pbnRzOiBCcmVha1BvaW50UmVnaXN0cnksIF9tYXRjaE1lZGlhOiBNYXRjaE1lZGlhKTtcbiAgICAvKipcbiAgICAgKiBSZWFkLW9ubHkgYWNjZXNzb3IgdG8gdGhlIGxpc3Qgb2YgYnJlYWtwb2ludHMgY29uZmlndXJlZCBpbiB0aGUgQnJlYWtQb2ludFJlZ2lzdHJ5IHByb3ZpZGVyXG4gICAgICovXG4gICAgcmVhZG9ubHkgYnJlYWtwb2ludHM6IEJyZWFrUG9pbnRbXTtcbiAgICByZWFkb25seSBhY3RpdmVPdmVybGFwczogQnJlYWtQb2ludFtdO1xuICAgIHJlYWRvbmx5IGFjdGl2ZTogQnJlYWtQb2ludCB8IG51bGw7XG4gICAgLyoqXG4gICAgICogRm9yIHRoZSBzcGVjaWZpZWQgbWVkaWFRdWVyeSBhbGlhcywgaXMgdGhlIG1lZGlhUXVlcnkgcmFuZ2UgYWN0aXZlP1xuICAgICAqL1xuICAgIGlzQWN0aXZlKGFsaWFzOiBzdHJpbmcpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEV4dGVybmFsIG9ic2VydmVycyBjYW4gd2F0Y2ggZm9yIGFsbCAob3IgYSBzcGVjaWZpYykgbXFsIGNoYW5nZXMuXG4gICAgICogSWYgc3BlY2lmaWMgYnJlYWtwb2ludCBpcyBvYnNlcnZlZCwgb25seSByZXR1cm4gKmFjdGl2YXRlZCogZXZlbnRzXG4gICAgICogb3RoZXJ3aXNlIHJldHVybiBhbGwgZXZlbnRzIGZvciBCT1RIIGFjdGl2YXRlZCArIGRlYWN0aXZhdGVkIGNoYW5nZXMuXG4gICAgICovXG4gICAgb2JzZXJ2ZShhbGlhcz86IHN0cmluZyk6IE9ic2VydmFibGU8TWVkaWFDaGFuZ2U+O1xuICAgIC8qKlxuICAgICAqIEltbWVkaWF0ZSBjYWxscyB0byBtYXRjaE1lZGlhKCkgdG8gZXN0YWJsaXNoIGxpc3RlbmVyc1xuICAgICAqIGFuZCBwcmVwYXJlIGZvciBpbW1lZGlhdGUgc3Vic2NyaXB0aW9uIG5vdGlmaWNhdGlvbnNcbiAgICAgKi9cbiAgICBwcml2YXRlIF9yZWdpc3RlckJyZWFrcG9pbnRzO1xufVxuIl19