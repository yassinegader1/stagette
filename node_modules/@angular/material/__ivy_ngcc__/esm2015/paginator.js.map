{"version":3,"file":"paginator.js","sources":["../../../src/lib/paginator/paginator-intl.ts","../../../src/lib/paginator/paginator.ts","../../../src/lib/paginator/paginator-module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {HasInitialized, mixinInitialized} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 7.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase = mixinInitialized(MatPaginatorBase);\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n"]}