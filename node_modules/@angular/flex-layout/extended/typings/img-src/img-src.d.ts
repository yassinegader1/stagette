/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { ElementRef, OnInit, OnChanges } from '@angular/core';
import { BaseDirective, MediaMonitor, StyleUtils } from '@angular/flex-layout/core';
/**
 * This directive provides a responsive API for the HTML <img> 'src' attribute
 * and will update the img.src property upon each responsive activation.
 *
 * e.g.
 *      <img src="defaultScene.jpg" src.xs="mobileScene.jpg"></img>
 *
 * @see https://css-tricks.com/responsive-images-youre-just-changing-resolutions-use-src/
 */
import * as ɵngcc0 from '@angular/core';
export declare class ImgSrcDirective extends BaseDirective implements OnInit, OnChanges {
    protected _elRef: ElementRef;
    protected _monitor: MediaMonitor;
    protected _styler: StyleUtils;
    protected _platformId: Object;
    protected _serverModuleLoaded: boolean;
    srcBase: string;
    srcXs: string;
    srcSm: string;
    srcMd: string;
    srcLg: string;
    srcXl: string;
    srcLtSm: string;
    srcLtMd: string;
    srcLtLg: string;
    srcLtXl: string;
    srcGtXs: string;
    srcGtSm: string;
    srcGtMd: string;
    srcGtLg: string;
    constructor(_elRef: ElementRef, _monitor: MediaMonitor, _styler: StyleUtils, _platformId: Object, _serverModuleLoaded: boolean);
    /**
     * Listen for responsive changes to update the img.src attribute
     */
    ngOnInit(): void;
    /**
     * Update the 'src' property of the host <img> element
     */
    ngOnChanges(): void;
    /**
     * Use the [responsively] activated input value to update
     * the host img src attribute or assign a default `img.src=''`
     * if the src has not been defined.
     *
     * Do nothing to standard `<img src="">` usages, only when responsive
     * keys are present do we actually call `setAttribute()`
     */
    protected _updateSrcFor(): void;
    /**
     * Cache initial value of 'src', this will be used as fallback when breakpoint
     * activations change.
     * NOTE: The default 'src' property is not bound using @Input(), so perform
     * a post-ngOnInit() lookup of the default src value (if any).
     */
    protected cacheDefaultSrc(value?: string): void;
    /**
     * Empty values are maintained, undefined values are exposed as ''
     */
    protected readonly defaultSrc: string;
    /**
     * Does the <img> have 1 or more src.<xxx> responsive inputs
     * defined... these will be mapped to activated breakpoints.
     */
    protected readonly hasResponsiveKeys: boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ImgSrcDirective, [null, null, null, null, { optional: true; }]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ImgSrcDirective, "  img[src.xs],    img[src.sm],    img[src.md],    img[src.lg],   img[src.xl],  img[src.lt-sm], img[src.lt-md], img[src.lt-lg], img[src.lt-xl],  img[src.gt-xs], img[src.gt-sm], img[src.gt-md], img[src.gt-lg]", never, { "srcBase": "src"; "srcXs": "src.xs"; "srcSm": "src.sm"; "srcMd": "src.md"; "srcLg": "src.lg"; "srcXl": "src.xl"; "srcLtSm": "src.lt-sm"; "srcLtMd": "src.lt-md"; "srcLtLg": "src.lt-lg"; "srcLtXl": "src.lt-xl"; "srcGtXs": "src.gt-xs"; "srcGtSm": "src.gt-sm"; "srcGtMd": "src.gt-md"; "srcGtLg": "src.gt-lg"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1nLXNyYy5kLnRzIiwic291cmNlcyI6WyJpbWctc3JjLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmltcG9ydCB7IEVsZW1lbnRSZWYsIE9uSW5pdCwgT25DaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCYXNlRGlyZWN0aXZlLCBNZWRpYU1vbml0b3IsIFN0eWxlVXRpbHMgfSBmcm9tICdAYW5ndWxhci9mbGV4LWxheW91dC9jb3JlJztcbi8qKlxuICogVGhpcyBkaXJlY3RpdmUgcHJvdmlkZXMgYSByZXNwb25zaXZlIEFQSSBmb3IgdGhlIEhUTUwgPGltZz4gJ3NyYycgYXR0cmlidXRlXG4gKiBhbmQgd2lsbCB1cGRhdGUgdGhlIGltZy5zcmMgcHJvcGVydHkgdXBvbiBlYWNoIHJlc3BvbnNpdmUgYWN0aXZhdGlvbi5cbiAqXG4gKiBlLmcuXG4gKiAgICAgIDxpbWcgc3JjPVwiZGVmYXVsdFNjZW5lLmpwZ1wiIHNyYy54cz1cIm1vYmlsZVNjZW5lLmpwZ1wiPjwvaW1nPlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9yZXNwb25zaXZlLWltYWdlcy15b3VyZS1qdXN0LWNoYW5naW5nLXJlc29sdXRpb25zLXVzZS1zcmMvXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEltZ1NyY0RpcmVjdGl2ZSBleHRlbmRzIEJhc2VEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcyB7XG4gICAgcHJvdGVjdGVkIF9lbFJlZjogRWxlbWVudFJlZjtcbiAgICBwcm90ZWN0ZWQgX21vbml0b3I6IE1lZGlhTW9uaXRvcjtcbiAgICBwcm90ZWN0ZWQgX3N0eWxlcjogU3R5bGVVdGlscztcbiAgICBwcm90ZWN0ZWQgX3BsYXRmb3JtSWQ6IE9iamVjdDtcbiAgICBwcm90ZWN0ZWQgX3NlcnZlck1vZHVsZUxvYWRlZDogYm9vbGVhbjtcbiAgICBzcmNCYXNlOiBzdHJpbmc7XG4gICAgc3JjWHM6IHN0cmluZztcbiAgICBzcmNTbTogc3RyaW5nO1xuICAgIHNyY01kOiBzdHJpbmc7XG4gICAgc3JjTGc6IHN0cmluZztcbiAgICBzcmNYbDogc3RyaW5nO1xuICAgIHNyY0x0U206IHN0cmluZztcbiAgICBzcmNMdE1kOiBzdHJpbmc7XG4gICAgc3JjTHRMZzogc3RyaW5nO1xuICAgIHNyY0x0WGw6IHN0cmluZztcbiAgICBzcmNHdFhzOiBzdHJpbmc7XG4gICAgc3JjR3RTbTogc3RyaW5nO1xuICAgIHNyY0d0TWQ6IHN0cmluZztcbiAgICBzcmNHdExnOiBzdHJpbmc7XG4gICAgY29uc3RydWN0b3IoX2VsUmVmOiBFbGVtZW50UmVmLCBfbW9uaXRvcjogTWVkaWFNb25pdG9yLCBfc3R5bGVyOiBTdHlsZVV0aWxzLCBfcGxhdGZvcm1JZDogT2JqZWN0LCBfc2VydmVyTW9kdWxlTG9hZGVkOiBib29sZWFuKTtcbiAgICAvKipcbiAgICAgKiBMaXN0ZW4gZm9yIHJlc3BvbnNpdmUgY2hhbmdlcyB0byB1cGRhdGUgdGhlIGltZy5zcmMgYXR0cmlidXRlXG4gICAgICovXG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBVcGRhdGUgdGhlICdzcmMnIHByb3BlcnR5IG9mIHRoZSBob3N0IDxpbWc+IGVsZW1lbnRcbiAgICAgKi9cbiAgICBuZ09uQ2hhbmdlcygpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFVzZSB0aGUgW3Jlc3BvbnNpdmVseV0gYWN0aXZhdGVkIGlucHV0IHZhbHVlIHRvIHVwZGF0ZVxuICAgICAqIHRoZSBob3N0IGltZyBzcmMgYXR0cmlidXRlIG9yIGFzc2lnbiBhIGRlZmF1bHQgYGltZy5zcmM9JydgXG4gICAgICogaWYgdGhlIHNyYyBoYXMgbm90IGJlZW4gZGVmaW5lZC5cbiAgICAgKlxuICAgICAqIERvIG5vdGhpbmcgdG8gc3RhbmRhcmQgYDxpbWcgc3JjPVwiXCI+YCB1c2FnZXMsIG9ubHkgd2hlbiByZXNwb25zaXZlXG4gICAgICoga2V5cyBhcmUgcHJlc2VudCBkbyB3ZSBhY3R1YWxseSBjYWxsIGBzZXRBdHRyaWJ1dGUoKWBcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgX3VwZGF0ZVNyY0ZvcigpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIENhY2hlIGluaXRpYWwgdmFsdWUgb2YgJ3NyYycsIHRoaXMgd2lsbCBiZSB1c2VkIGFzIGZhbGxiYWNrIHdoZW4gYnJlYWtwb2ludFxuICAgICAqIGFjdGl2YXRpb25zIGNoYW5nZS5cbiAgICAgKiBOT1RFOiBUaGUgZGVmYXVsdCAnc3JjJyBwcm9wZXJ0eSBpcyBub3QgYm91bmQgdXNpbmcgQElucHV0KCksIHNvIHBlcmZvcm1cbiAgICAgKiBhIHBvc3QtbmdPbkluaXQoKSBsb29rdXAgb2YgdGhlIGRlZmF1bHQgc3JjIHZhbHVlIChpZiBhbnkpLlxuICAgICAqL1xuICAgIHByb3RlY3RlZCBjYWNoZURlZmF1bHRTcmModmFsdWU/OiBzdHJpbmcpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEVtcHR5IHZhbHVlcyBhcmUgbWFpbnRhaW5lZCwgdW5kZWZpbmVkIHZhbHVlcyBhcmUgZXhwb3NlZCBhcyAnJ1xuICAgICAqL1xuICAgIHByb3RlY3RlZCByZWFkb25seSBkZWZhdWx0U3JjOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogRG9lcyB0aGUgPGltZz4gaGF2ZSAxIG9yIG1vcmUgc3JjLjx4eHg+IHJlc3BvbnNpdmUgaW5wdXRzXG4gICAgICogZGVmaW5lZC4uLiB0aGVzZSB3aWxsIGJlIG1hcHBlZCB0byBhY3RpdmF0ZWQgYnJlYWtwb2ludHMuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGhhc1Jlc3BvbnNpdmVLZXlzOiBib29sZWFuO1xufVxuIl19