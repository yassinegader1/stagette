{"version":3,"file":"badge.js","sources":["../../../src/lib/badge/badge.ts","../../../src/lib/badge/badge-module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Renderer2,\n} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n\nlet nextId = 0;\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n  },\n})\nexport class MatBadge implements OnDestroy {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(value: string) {\n    this._content = value;\n    this._hasContent = value != null && `${value}`.trim().length > 0;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      /** @breaking-change 8.0.0 Make _renderer a required param and remove _document. */\n      private _renderer?: Renderer2) {}\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    // @breaking-change 8.0.0 Remove null check for _renderer\n    const rootNode = this._renderer || this._document;\n    const badgeElement = rootNode.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n"]}