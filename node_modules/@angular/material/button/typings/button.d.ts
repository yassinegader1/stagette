/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { FocusMonitor } from '@angular/cdk/a11y';
import { Platform } from '@angular/cdk/platform';
import { ElementRef, OnDestroy } from '@angular/core';
import { CanColor, CanDisable, CanDisableRipple, MatRipple } from '@angular/material/core';
/** @docs-private */
import * as ɵngcc0 from '@angular/core';
export declare class MatButtonBase {
    _elementRef: ElementRef;
    constructor(_elementRef: ElementRef);
}
export declare const _MatButtonMixinBase: (new (...args: any[]) => CanColor) & (new (...args: any[]) => CanDisable) & (new (...args: any[]) => CanDisableRipple) & typeof MatButtonBase;
/**
 * Material design button.
 */
export declare class MatButton extends _MatButtonMixinBase implements OnDestroy, CanDisable, CanColor, CanDisableRipple {
    /**
     * @deprecated Platform checks for SSR are no longer needed
     * @breaking-change 7.0.0
     */
    private _platform;
    private _focusMonitor;
    _animationMode: string | undefined;
    /** Whether the button is round. */
    readonly isRoundButton: boolean;
    /** Whether the button is icon button. */
    readonly isIconButton: boolean;
    /** Reference to the MatRipple instance of the button. */
    ripple: MatRipple;
    constructor(elementRef: ElementRef, 
        /**
         * @deprecated Platform checks for SSR are no longer needed
         * @breaking-change 7.0.0
         */
        _platform: Platform, _focusMonitor: FocusMonitor, _animationMode?: string | undefined);
    ngOnDestroy(): void;
    /** Focuses the button. */
    focus(): void;
    _getHostElement(): any;
    _isRippleDisabled(): boolean;
    /** Gets whether the button has one of the given attributes. */
    _hasHostAttributes(...attributes: string[]): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MatButton, [null, null, null, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MatButton, "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", ["matButton"], { "disabled": "disabled"; "disableRipple": "disableRipple"; "color": "color"; }, {}, never, ["*"]>;
}
/**
 * Raised Material design button.
 */
export declare class MatAnchor extends MatButton {
    /** Tabindex of the button. */
    tabIndex: number;
    constructor(platform: Platform, focusMonitor: FocusMonitor, elementRef: ElementRef, animationMode?: string);
    _haltDisabledEvents(event: Event): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MatAnchor, [null, null, null, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MatAnchor, "a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]", ["matButton", "matAnchor"], { "disabled": "disabled"; "disableRipple": "disableRipple"; "color": "color"; "tabIndex": "tabIndex"; }, {}, never, ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV0dG9uLmQudHMiLCJzb3VyY2VzIjpbImJ1dHRvbi5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5pbXBvcnQgeyBGb2N1c01vbml0b3IgfSBmcm9tICdAYW5ndWxhci9jZGsvYTExeSc7XG5pbXBvcnQgeyBQbGF0Zm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9wbGF0Zm9ybSc7XG5pbXBvcnQgeyBFbGVtZW50UmVmLCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENhbkNvbG9yLCBDYW5EaXNhYmxlLCBDYW5EaXNhYmxlUmlwcGxlLCBNYXRSaXBwbGUgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9jb3JlJztcbi8qKiBAZG9jcy1wcml2YXRlICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBNYXRCdXR0b25CYXNlIHtcbiAgICBfZWxlbWVudFJlZjogRWxlbWVudFJlZjtcbiAgICBjb25zdHJ1Y3RvcihfZWxlbWVudFJlZjogRWxlbWVudFJlZik7XG59XG5leHBvcnQgZGVjbGFyZSBjb25zdCBfTWF0QnV0dG9uTWl4aW5CYXNlOiAobmV3ICguLi5hcmdzOiBhbnlbXSkgPT4gQ2FuQ29sb3IpICYgKG5ldyAoLi4uYXJnczogYW55W10pID0+IENhbkRpc2FibGUpICYgKG5ldyAoLi4uYXJnczogYW55W10pID0+IENhbkRpc2FibGVSaXBwbGUpICYgdHlwZW9mIE1hdEJ1dHRvbkJhc2U7XG4vKipcbiAqIE1hdGVyaWFsIGRlc2lnbiBidXR0b24uXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE1hdEJ1dHRvbiBleHRlbmRzIF9NYXRCdXR0b25NaXhpbkJhc2UgaW1wbGVtZW50cyBPbkRlc3Ryb3ksIENhbkRpc2FibGUsIENhbkNvbG9yLCBDYW5EaXNhYmxlUmlwcGxlIHtcbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCBQbGF0Zm9ybSBjaGVja3MgZm9yIFNTUiBhcmUgbm8gbG9uZ2VyIG5lZWRlZFxuICAgICAqIEBicmVha2luZy1jaGFuZ2UgNy4wLjBcbiAgICAgKi9cbiAgICBwcml2YXRlIF9wbGF0Zm9ybTtcbiAgICBwcml2YXRlIF9mb2N1c01vbml0b3I7XG4gICAgX2FuaW1hdGlvbk1vZGU6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICAvKiogV2hldGhlciB0aGUgYnV0dG9uIGlzIHJvdW5kLiAqL1xuICAgIHJlYWRvbmx5IGlzUm91bmRCdXR0b246IGJvb2xlYW47XG4gICAgLyoqIFdoZXRoZXIgdGhlIGJ1dHRvbiBpcyBpY29uIGJ1dHRvbi4gKi9cbiAgICByZWFkb25seSBpc0ljb25CdXR0b246IGJvb2xlYW47XG4gICAgLyoqIFJlZmVyZW5jZSB0byB0aGUgTWF0UmlwcGxlIGluc3RhbmNlIG9mIHRoZSBidXR0b24uICovXG4gICAgcmlwcGxlOiBNYXRSaXBwbGU7XG4gICAgY29uc3RydWN0b3IoZWxlbWVudFJlZjogRWxlbWVudFJlZiwgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVwcmVjYXRlZCBQbGF0Zm9ybSBjaGVja3MgZm9yIFNTUiBhcmUgbm8gbG9uZ2VyIG5lZWRlZFxuICAgICAgICAgKiBAYnJlYWtpbmctY2hhbmdlIDcuMC4wXG4gICAgICAgICAqL1xuICAgICAgICBfcGxhdGZvcm06IFBsYXRmb3JtLCBfZm9jdXNNb25pdG9yOiBGb2N1c01vbml0b3IsIF9hbmltYXRpb25Nb2RlPzogc3RyaW5nIHwgdW5kZWZpbmVkKTtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIC8qKiBGb2N1c2VzIHRoZSBidXR0b24uICovXG4gICAgZm9jdXMoKTogdm9pZDtcbiAgICBfZ2V0SG9zdEVsZW1lbnQoKTogYW55O1xuICAgIF9pc1JpcHBsZURpc2FibGVkKCk6IGJvb2xlYW47XG4gICAgLyoqIEdldHMgd2hldGhlciB0aGUgYnV0dG9uIGhhcyBvbmUgb2YgdGhlIGdpdmVuIGF0dHJpYnV0ZXMuICovXG4gICAgX2hhc0hvc3RBdHRyaWJ1dGVzKC4uLmF0dHJpYnV0ZXM6IHN0cmluZ1tdKTogYm9vbGVhbjtcbn1cbi8qKlxuICogUmFpc2VkIE1hdGVyaWFsIGRlc2lnbiBidXR0b24uXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE1hdEFuY2hvciBleHRlbmRzIE1hdEJ1dHRvbiB7XG4gICAgLyoqIFRhYmluZGV4IG9mIHRoZSBidXR0b24uICovXG4gICAgdGFiSW5kZXg6IG51bWJlcjtcbiAgICBjb25zdHJ1Y3RvcihwbGF0Zm9ybTogUGxhdGZvcm0sIGZvY3VzTW9uaXRvcjogRm9jdXNNb25pdG9yLCBlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBhbmltYXRpb25Nb2RlPzogc3RyaW5nKTtcbiAgICBfaGFsdERpc2FibGVkRXZlbnRzKGV2ZW50OiBFdmVudCk6IHZvaWQ7XG59XG4iXX0=