{"version":3,"file":"sort.js","sources":["../../../src/lib/sort/sort-errors.ts","../../../src/lib/sort/sort.ts","../../../src/lib/sort/sort-animations.ts","../../../src/lib/sort/sort-header-intl.ts","../../../src/lib/sort/sort-header.ts","../../../src/lib/sort/sort-module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, HasInitialized, mixinDisabled, mixinInitialized} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError\n} from './sort-errors';\nimport {Subject} from 'rxjs';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n"]}