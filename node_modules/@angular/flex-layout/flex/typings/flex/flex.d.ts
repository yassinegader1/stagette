/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { ElementRef, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { BaseDirective, LayoutConfigOptions, MediaMonitor, StyleUtils } from '@angular/flex-layout/core';
import { Subscription } from 'rxjs';
import { Layout, LayoutDirective } from '../layout/layout';
/** Built-in aliases for different flex-basis values. */
import * as ɵngcc0 from '@angular/core';
export declare type FlexBasisAlias = 'grow' | 'initial' | 'auto' | 'none' | 'nogrow' | 'noshrink';
/**
 * Directive to control the size of a flex item using flex-basis, flex-grow, and flex-shrink.
 * Corresponds to the css `flex` shorthand property.
 *
 * @see https://css-tricks.com/snippets/css/a-guide-to-flexbox/
 */
export declare class FlexDirective extends BaseDirective implements OnInit, OnChanges, OnDestroy {
    protected _container: LayoutDirective;
    protected styleUtils: StyleUtils;
    protected layoutConfig: LayoutConfigOptions;
    /** The flex-direction of this element's flex container. Defaults to 'row'. */
    protected _layout?: Layout;
    /**
     * Subscription to the parent flex container's layout changes.
     * Stored so we can unsubscribe when this directive is destroyed.
     */
    protected _layoutWatcher?: Subscription;
    shrink: string;
    grow: string;
    flex: string;
    flexXs: string;
    flexSm: string;
    flexMd: string;
    flexLg: string;
    flexXl: string;
    flexGtXs: string;
    flexGtSm: string;
    flexGtMd: string;
    flexGtLg: string;
    flexLtSm: string;
    flexLtMd: string;
    flexLtLg: string;
    flexLtXl: string;
    constructor(monitor: MediaMonitor, elRef: ElementRef, _container: LayoutDirective, styleUtils: StyleUtils, layoutConfig: LayoutConfigOptions);
    /**
     * For @Input changes on the current mq activation property, see onMediaQueryChanges()
     */
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * After the initial onChanges, build an mqActivation object that bridges
     * mql change events to onMediaQueryChange handlers
     */
    ngOnInit(): void;
    ngOnDestroy(): void;
    /**
     * Caches the parent container's 'flex-direction' and updates the element's style.
     * Used as a handler for layout change events from the parent flex container.
     */
    protected _onLayoutChange(layout?: Layout): void;
    protected _updateStyle(value?: string | number): void;
    /**
     * Validate the value to be one of the acceptable value options
     * Use default fallback of 'row'
     */
    protected _validateValue(grow: number | string, shrink: number | string, basis: string | number | FlexBasisAlias): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<FlexDirective, [null, null, { optional: true; skipSelf: true; }, null, null]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<FlexDirective, "  [fxFlex],  [fxFlex.xs], [fxFlex.sm], [fxFlex.md], [fxFlex.lg], [fxFlex.xl],  [fxFlex.lt-sm], [fxFlex.lt-md], [fxFlex.lt-lg], [fxFlex.lt-xl],  [fxFlex.gt-xs], [fxFlex.gt-sm], [fxFlex.gt-md], [fxFlex.gt-lg],", never, { "shrink": "fxShrink"; "grow": "fxGrow"; "flex": "fxFlex"; "flexXs": "fxFlex.xs"; "flexSm": "fxFlex.sm"; "flexMd": "fxFlex.md"; "flexLg": "fxFlex.lg"; "flexXl": "fxFlex.xl"; "flexGtXs": "fxFlex.gt-xs"; "flexGtSm": "fxFlex.gt-sm"; "flexGtMd": "fxFlex.gt-md"; "flexGtLg": "fxFlex.gt-lg"; "flexLtSm": "fxFlex.lt-sm"; "flexLtMd": "fxFlex.lt-md"; "flexLtLg": "fxFlex.lt-lg"; "flexLtXl": "fxFlex.lt-xl"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxleC5kLnRzIiwic291cmNlcyI6WyJmbGV4LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5pbXBvcnQgeyBFbGVtZW50UmVmLCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgT25Jbml0LCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCYXNlRGlyZWN0aXZlLCBMYXlvdXRDb25maWdPcHRpb25zLCBNZWRpYU1vbml0b3IsIFN0eWxlVXRpbHMgfSBmcm9tICdAYW5ndWxhci9mbGV4LWxheW91dC9jb3JlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgTGF5b3V0LCBMYXlvdXREaXJlY3RpdmUgfSBmcm9tICcuLi9sYXlvdXQvbGF5b3V0Jztcbi8qKiBCdWlsdC1pbiBhbGlhc2VzIGZvciBkaWZmZXJlbnQgZmxleC1iYXNpcyB2YWx1ZXMuICovXG5leHBvcnQgZGVjbGFyZSB0eXBlIEZsZXhCYXNpc0FsaWFzID0gJ2dyb3cnIHwgJ2luaXRpYWwnIHwgJ2F1dG8nIHwgJ25vbmUnIHwgJ25vZ3JvdycgfCAnbm9zaHJpbmsnO1xuLyoqXG4gKiBEaXJlY3RpdmUgdG8gY29udHJvbCB0aGUgc2l6ZSBvZiBhIGZsZXggaXRlbSB1c2luZyBmbGV4LWJhc2lzLCBmbGV4LWdyb3csIGFuZCBmbGV4LXNocmluay5cbiAqIENvcnJlc3BvbmRzIHRvIHRoZSBjc3MgYGZsZXhgIHNob3J0aGFuZCBwcm9wZXJ0eS5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vc25pcHBldHMvY3NzL2EtZ3VpZGUtdG8tZmxleGJveC9cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRmxleERpcmVjdGl2ZSBleHRlbmRzIEJhc2VEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcbiAgICBwcm90ZWN0ZWQgX2NvbnRhaW5lcjogTGF5b3V0RGlyZWN0aXZlO1xuICAgIHByb3RlY3RlZCBzdHlsZVV0aWxzOiBTdHlsZVV0aWxzO1xuICAgIHByb3RlY3RlZCBsYXlvdXRDb25maWc6IExheW91dENvbmZpZ09wdGlvbnM7XG4gICAgLyoqIFRoZSBmbGV4LWRpcmVjdGlvbiBvZiB0aGlzIGVsZW1lbnQncyBmbGV4IGNvbnRhaW5lci4gRGVmYXVsdHMgdG8gJ3JvdycuICovXG4gICAgcHJvdGVjdGVkIF9sYXlvdXQ/OiBMYXlvdXQ7XG4gICAgLyoqXG4gICAgICogU3Vic2NyaXB0aW9uIHRvIHRoZSBwYXJlbnQgZmxleCBjb250YWluZXIncyBsYXlvdXQgY2hhbmdlcy5cbiAgICAgKiBTdG9yZWQgc28gd2UgY2FuIHVuc3Vic2NyaWJlIHdoZW4gdGhpcyBkaXJlY3RpdmUgaXMgZGVzdHJveWVkLlxuICAgICAqL1xuICAgIHByb3RlY3RlZCBfbGF5b3V0V2F0Y2hlcj86IFN1YnNjcmlwdGlvbjtcbiAgICBzaHJpbms6IHN0cmluZztcbiAgICBncm93OiBzdHJpbmc7XG4gICAgZmxleDogc3RyaW5nO1xuICAgIGZsZXhYczogc3RyaW5nO1xuICAgIGZsZXhTbTogc3RyaW5nO1xuICAgIGZsZXhNZDogc3RyaW5nO1xuICAgIGZsZXhMZzogc3RyaW5nO1xuICAgIGZsZXhYbDogc3RyaW5nO1xuICAgIGZsZXhHdFhzOiBzdHJpbmc7XG4gICAgZmxleEd0U206IHN0cmluZztcbiAgICBmbGV4R3RNZDogc3RyaW5nO1xuICAgIGZsZXhHdExnOiBzdHJpbmc7XG4gICAgZmxleEx0U206IHN0cmluZztcbiAgICBmbGV4THRNZDogc3RyaW5nO1xuICAgIGZsZXhMdExnOiBzdHJpbmc7XG4gICAgZmxleEx0WGw6IHN0cmluZztcbiAgICBjb25zdHJ1Y3Rvcihtb25pdG9yOiBNZWRpYU1vbml0b3IsIGVsUmVmOiBFbGVtZW50UmVmLCBfY29udGFpbmVyOiBMYXlvdXREaXJlY3RpdmUsIHN0eWxlVXRpbHM6IFN0eWxlVXRpbHMsIGxheW91dENvbmZpZzogTGF5b3V0Q29uZmlnT3B0aW9ucyk7XG4gICAgLyoqXG4gICAgICogRm9yIEBJbnB1dCBjaGFuZ2VzIG9uIHRoZSBjdXJyZW50IG1xIGFjdGl2YXRpb24gcHJvcGVydHksIHNlZSBvbk1lZGlhUXVlcnlDaGFuZ2VzKClcbiAgICAgKi9cbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBBZnRlciB0aGUgaW5pdGlhbCBvbkNoYW5nZXMsIGJ1aWxkIGFuIG1xQWN0aXZhdGlvbiBvYmplY3QgdGhhdCBicmlkZ2VzXG4gICAgICogbXFsIGNoYW5nZSBldmVudHMgdG8gb25NZWRpYVF1ZXJ5Q2hhbmdlIGhhbmRsZXJzXG4gICAgICovXG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIENhY2hlcyB0aGUgcGFyZW50IGNvbnRhaW5lcidzICdmbGV4LWRpcmVjdGlvbicgYW5kIHVwZGF0ZXMgdGhlIGVsZW1lbnQncyBzdHlsZS5cbiAgICAgKiBVc2VkIGFzIGEgaGFuZGxlciBmb3IgbGF5b3V0IGNoYW5nZSBldmVudHMgZnJvbSB0aGUgcGFyZW50IGZsZXggY29udGFpbmVyLlxuICAgICAqL1xuICAgIHByb3RlY3RlZCBfb25MYXlvdXRDaGFuZ2UobGF5b3V0PzogTGF5b3V0KTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgX3VwZGF0ZVN0eWxlKHZhbHVlPzogc3RyaW5nIHwgbnVtYmVyKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBWYWxpZGF0ZSB0aGUgdmFsdWUgdG8gYmUgb25lIG9mIHRoZSBhY2NlcHRhYmxlIHZhbHVlIG9wdGlvbnNcbiAgICAgKiBVc2UgZGVmYXVsdCBmYWxsYmFjayBvZiAncm93J1xuICAgICAqL1xuICAgIHByb3RlY3RlZCBfdmFsaWRhdGVWYWx1ZShncm93OiBudW1iZXIgfCBzdHJpbmcsIHNocmluazogbnVtYmVyIHwgc3RyaW5nLCBiYXNpczogc3RyaW5nIHwgbnVtYmVyIHwgRmxleEJhc2lzQWxpYXMpOiBhbnk7XG59XG4iXX0=