/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { InjectionToken } from '@angular/core';
/** Injection token that configures whether the Material sanity checks are enabled. */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/cdk/bidi';
export declare const MATERIAL_SANITY_CHECKS: InjectionToken<boolean>;
/** @docs-private */
export declare function MATERIAL_SANITY_CHECKS_FACTORY(): boolean;
/**
 * Module that captures anything that should be loaded and/or run for *all* Angular Material
 * components. This includes Bidi, etc.
 *
 * This module should be imported to each top-level component module (e.g., MatTabsModule).
 */
export declare class MatCommonModule {
    private _sanityChecksEnabled;
    /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */
    private _hasDoneGlobalChecks;
    /** Whether we've already checked for HammerJs availability. */
    private _hasCheckedHammer;
    /** Reference to the global `document` object. */
    private _document;
    /** Reference to the global 'window' object. */
    private _window;
    constructor(_sanityChecksEnabled: boolean);
    /** Whether any sanity checks are enabled */
    private _areChecksEnabled();
    /** Whether the code is running in tests. */
    private _isTestEnv();
    private _checkDoctypeIsDefined();
    private _checkThemeIsPresent();
    /** Checks whether HammerJS is available. */
    _checkHammerIsAvailable(): void;
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<MatCommonModule, never, [typeof ɵngcc1.BidiModule], [typeof ɵngcc1.BidiModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<MatCommonModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLW1vZHVsZS5kLnRzIiwic291cmNlcyI6WyJjb21tb24tbW9kdWxlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmltcG9ydCB7IEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG4vKiogSW5qZWN0aW9uIHRva2VuIHRoYXQgY29uZmlndXJlcyB3aGV0aGVyIHRoZSBNYXRlcmlhbCBzYW5pdHkgY2hlY2tzIGFyZSBlbmFibGVkLiAqL1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgTUFURVJJQUxfU0FOSVRZX0NIRUNLUzogSW5qZWN0aW9uVG9rZW48Ym9vbGVhbj47XG4vKiogQGRvY3MtcHJpdmF0ZSAqL1xuZXhwb3J0IGRlY2xhcmUgZnVuY3Rpb24gTUFURVJJQUxfU0FOSVRZX0NIRUNLU19GQUNUT1JZKCk6IGJvb2xlYW47XG4vKipcbiAqIE1vZHVsZSB0aGF0IGNhcHR1cmVzIGFueXRoaW5nIHRoYXQgc2hvdWxkIGJlIGxvYWRlZCBhbmQvb3IgcnVuIGZvciAqYWxsKiBBbmd1bGFyIE1hdGVyaWFsXG4gKiBjb21wb25lbnRzLiBUaGlzIGluY2x1ZGVzIEJpZGksIGV0Yy5cbiAqXG4gKiBUaGlzIG1vZHVsZSBzaG91bGQgYmUgaW1wb3J0ZWQgdG8gZWFjaCB0b3AtbGV2ZWwgY29tcG9uZW50IG1vZHVsZSAoZS5nLiwgTWF0VGFic01vZHVsZSkuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE1hdENvbW1vbk1vZHVsZSB7XG4gICAgcHJpdmF0ZSBfc2FuaXR5Q2hlY2tzRW5hYmxlZDtcbiAgICAvKiogV2hldGhlciB3ZSd2ZSBkb25lIHRoZSBnbG9iYWwgc2FuaXR5IGNoZWNrcyAoZS5nLiBhIHRoZW1lIGlzIGxvYWRlZCwgdGhlcmUgaXMgYSBkb2N0eXBlKS4gKi9cbiAgICBwcml2YXRlIF9oYXNEb25lR2xvYmFsQ2hlY2tzO1xuICAgIC8qKiBXaGV0aGVyIHdlJ3ZlIGFscmVhZHkgY2hlY2tlZCBmb3IgSGFtbWVySnMgYXZhaWxhYmlsaXR5LiAqL1xuICAgIHByaXZhdGUgX2hhc0NoZWNrZWRIYW1tZXI7XG4gICAgLyoqIFJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIGBkb2N1bWVudGAgb2JqZWN0LiAqL1xuICAgIHByaXZhdGUgX2RvY3VtZW50O1xuICAgIC8qKiBSZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCAnd2luZG93JyBvYmplY3QuICovXG4gICAgcHJpdmF0ZSBfd2luZG93O1xuICAgIGNvbnN0cnVjdG9yKF9zYW5pdHlDaGVja3NFbmFibGVkOiBib29sZWFuKTtcbiAgICAvKiogV2hldGhlciBhbnkgc2FuaXR5IGNoZWNrcyBhcmUgZW5hYmxlZCAqL1xuICAgIHByaXZhdGUgX2FyZUNoZWNrc0VuYWJsZWQoKTtcbiAgICAvKiogV2hldGhlciB0aGUgY29kZSBpcyBydW5uaW5nIGluIHRlc3RzLiAqL1xuICAgIHByaXZhdGUgX2lzVGVzdEVudigpO1xuICAgIHByaXZhdGUgX2NoZWNrRG9jdHlwZUlzRGVmaW5lZCgpO1xuICAgIHByaXZhdGUgX2NoZWNrVGhlbWVJc1ByZXNlbnQoKTtcbiAgICAvKiogQ2hlY2tzIHdoZXRoZXIgSGFtbWVySlMgaXMgYXZhaWxhYmxlLiAqL1xuICAgIF9jaGVja0hhbW1lcklzQXZhaWxhYmxlKCk6IHZvaWQ7XG59XG4iXX0=