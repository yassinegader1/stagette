/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { ElementRef, OnInit, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';
import { BaseDirective, MediaMonitor, StyleUtils } from '@angular/flex-layout/core';
import { Observable, ReplaySubject } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export declare type Layout = {
    direction: string;
    wrap: boolean;
};
/**
 * 'layout' flexbox styling directive
 * Defines the positioning flow direction for the child elements: row or column
 * Optional values: column or row (default)
 * @see https://css-tricks.com/almanac/properties/f/flex-direction/
 *
 */
export declare class LayoutDirective extends BaseDirective implements OnInit, OnChanges, OnDestroy {
    /**
     * Create Observable for nested/child 'flex' directives. This allows
     * child flex directives to subscribe/listen for flexbox direction changes.
     */
    protected _announcer: ReplaySubject<Layout>;
    /**
     * Publish observer to enabled nested, dependent directives to listen
     * to parent 'layout' direction changes
     */
    layout$: Observable<Layout>;
    layout: string;
    layoutXs: string;
    layoutSm: string;
    layoutMd: string;
    layoutLg: string;
    layoutXl: string;
    layoutGtXs: string;
    layoutGtSm: string;
    layoutGtMd: string;
    layoutGtLg: string;
    layoutLtSm: string;
    layoutLtMd: string;
    layoutLtLg: string;
    layoutLtXl: string;
    constructor(monitor: MediaMonitor, elRef: ElementRef, styleUtils: StyleUtils);
    /**
     * On changes to any @Input properties...
     * Default to use the non-responsive Input value ('fxLayout')
     * Then conditionally override with the mq-activated Input's current value
     */
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * After the initial onChanges, build an mqActivation object that bridges
     * mql change events to onMediaQueryChange handlers
     */
    ngOnInit(): void;
    /** Validate the direction value and then update the host's inline flexbox styles */
    protected _updateWithDirection(value?: string): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LayoutDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<LayoutDirective, "  [fxLayout],  [fxLayout.xs], [fxLayout.sm], [fxLayout.md], [fxLayout.lg], [fxLayout.xl],  [fxLayout.lt-sm], [fxLayout.lt-md], [fxLayout.lt-lg], [fxLayout.lt-xl],  [fxLayout.gt-xs], [fxLayout.gt-sm], [fxLayout.gt-md], [fxLayout.gt-lg]", never, { "layout": "fxLayout"; "layoutXs": "fxLayout.xs"; "layoutSm": "fxLayout.sm"; "layoutMd": "fxLayout.md"; "layoutLg": "fxLayout.lg"; "layoutXl": "fxLayout.xl"; "layoutGtXs": "fxLayout.gt-xs"; "layoutGtSm": "fxLayout.gt-sm"; "layoutGtMd": "fxLayout.gt-md"; "layoutGtLg": "fxLayout.gt-lg"; "layoutLtSm": "fxLayout.lt-sm"; "layoutLtMd": "fxLayout.lt-md"; "layoutLtLg": "fxLayout.lt-lg"; "layoutLtXl": "fxLayout.lt-xl"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF5b3V0LmQudHMiLCJzb3VyY2VzIjpbImxheW91dC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5pbXBvcnQgeyBFbGVtZW50UmVmLCBPbkluaXQsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCYXNlRGlyZWN0aXZlLCBNZWRpYU1vbml0b3IsIFN0eWxlVXRpbHMgfSBmcm9tICdAYW5ndWxhci9mbGV4LWxheW91dC9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFJlcGxheVN1YmplY3QgfSBmcm9tICdyeGpzJztcbmV4cG9ydCBkZWNsYXJlIHR5cGUgTGF5b3V0ID0ge1xuICAgIGRpcmVjdGlvbjogc3RyaW5nO1xuICAgIHdyYXA6IGJvb2xlYW47XG59O1xuLyoqXG4gKiAnbGF5b3V0JyBmbGV4Ym94IHN0eWxpbmcgZGlyZWN0aXZlXG4gKiBEZWZpbmVzIHRoZSBwb3NpdGlvbmluZyBmbG93IGRpcmVjdGlvbiBmb3IgdGhlIGNoaWxkIGVsZW1lbnRzOiByb3cgb3IgY29sdW1uXG4gKiBPcHRpb25hbCB2YWx1ZXM6IGNvbHVtbiBvciByb3cgKGRlZmF1bHQpXG4gKiBAc2VlIGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vYWxtYW5hYy9wcm9wZXJ0aWVzL2YvZmxleC1kaXJlY3Rpb24vXG4gKlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBMYXlvdXREaXJlY3RpdmUgZXh0ZW5kcyBCYXNlRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIE9ic2VydmFibGUgZm9yIG5lc3RlZC9jaGlsZCAnZmxleCcgZGlyZWN0aXZlcy4gVGhpcyBhbGxvd3NcbiAgICAgKiBjaGlsZCBmbGV4IGRpcmVjdGl2ZXMgdG8gc3Vic2NyaWJlL2xpc3RlbiBmb3IgZmxleGJveCBkaXJlY3Rpb24gY2hhbmdlcy5cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgX2Fubm91bmNlcjogUmVwbGF5U3ViamVjdDxMYXlvdXQ+O1xuICAgIC8qKlxuICAgICAqIFB1Ymxpc2ggb2JzZXJ2ZXIgdG8gZW5hYmxlZCBuZXN0ZWQsIGRlcGVuZGVudCBkaXJlY3RpdmVzIHRvIGxpc3RlblxuICAgICAqIHRvIHBhcmVudCAnbGF5b3V0JyBkaXJlY3Rpb24gY2hhbmdlc1xuICAgICAqL1xuICAgIGxheW91dCQ6IE9ic2VydmFibGU8TGF5b3V0PjtcbiAgICBsYXlvdXQ6IHN0cmluZztcbiAgICBsYXlvdXRYczogc3RyaW5nO1xuICAgIGxheW91dFNtOiBzdHJpbmc7XG4gICAgbGF5b3V0TWQ6IHN0cmluZztcbiAgICBsYXlvdXRMZzogc3RyaW5nO1xuICAgIGxheW91dFhsOiBzdHJpbmc7XG4gICAgbGF5b3V0R3RYczogc3RyaW5nO1xuICAgIGxheW91dEd0U206IHN0cmluZztcbiAgICBsYXlvdXRHdE1kOiBzdHJpbmc7XG4gICAgbGF5b3V0R3RMZzogc3RyaW5nO1xuICAgIGxheW91dEx0U206IHN0cmluZztcbiAgICBsYXlvdXRMdE1kOiBzdHJpbmc7XG4gICAgbGF5b3V0THRMZzogc3RyaW5nO1xuICAgIGxheW91dEx0WGw6IHN0cmluZztcbiAgICBjb25zdHJ1Y3Rvcihtb25pdG9yOiBNZWRpYU1vbml0b3IsIGVsUmVmOiBFbGVtZW50UmVmLCBzdHlsZVV0aWxzOiBTdHlsZVV0aWxzKTtcbiAgICAvKipcbiAgICAgKiBPbiBjaGFuZ2VzIHRvIGFueSBASW5wdXQgcHJvcGVydGllcy4uLlxuICAgICAqIERlZmF1bHQgdG8gdXNlIHRoZSBub24tcmVzcG9uc2l2ZSBJbnB1dCB2YWx1ZSAoJ2Z4TGF5b3V0JylcbiAgICAgKiBUaGVuIGNvbmRpdGlvbmFsbHkgb3ZlcnJpZGUgd2l0aCB0aGUgbXEtYWN0aXZhdGVkIElucHV0J3MgY3VycmVudCB2YWx1ZVxuICAgICAqL1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEFmdGVyIHRoZSBpbml0aWFsIG9uQ2hhbmdlcywgYnVpbGQgYW4gbXFBY3RpdmF0aW9uIG9iamVjdCB0aGF0IGJyaWRnZXNcbiAgICAgKiBtcWwgY2hhbmdlIGV2ZW50cyB0byBvbk1lZGlhUXVlcnlDaGFuZ2UgaGFuZGxlcnNcbiAgICAgKi9cbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIC8qKiBWYWxpZGF0ZSB0aGUgZGlyZWN0aW9uIHZhbHVlIGFuZCB0aGVuIHVwZGF0ZSB0aGUgaG9zdCdzIGlubGluZSBmbGV4Ym94IHN0eWxlcyAqL1xuICAgIHByb3RlY3RlZCBfdXBkYXRlV2l0aERpcmVjdGlvbih2YWx1ZT86IHN0cmluZyk6IHZvaWQ7XG59XG4iXX0=