import { NgZone } from '@angular/core';
import { BehaviorSubject, Observable } from 'rxjs';
import { BreakPoint } from '../breakpoints/break-point';
import { MatchMedia } from './match-media';
import { MediaChange } from '../media-change';
/**
 * Special server-only class to simulate a MediaQueryList and
 * - supports manual activation to simulate mediaQuery matching
 * - manages listeners
 */
import * as ɵngcc0 from '@angular/core';
export declare class ServerMediaQueryList implements MediaQueryList {
    private _mediaQuery;
    private _isActive;
    private _listeners;
    readonly matches: boolean;
    readonly media: string;
    constructor(_mediaQuery: string);
    /**
     * Destroy the current list by deactivating the
     * listeners and clearing the internal list
     */
    destroy(): void;
    /** Notify all listeners that 'matches === TRUE' */
    activate(): ServerMediaQueryList;
    /** Notify all listeners that 'matches === false' */
    deactivate(): ServerMediaQueryList;
    /** Add a listener to our internal list to activate later */
    addListener(listener: MediaQueryListListener): void;
    /** Don't need to remove listeners in the server environment */
    removeListener(_: EventListenerOrEventListenerObject | null): void;
    addEventListener<K extends keyof MediaQueryListEventMap>(_: K, __: (this: MediaQueryList, ev: MediaQueryListEventMap[K]) => any, ___?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof MediaQueryListEventMap>(_: K, __: (this: MediaQueryList, ev: MediaQueryListEventMap[K]) => any, ___?: boolean | EventListenerOptions): void;
    dispatchEvent(_: Event): boolean;
    onchange: MediaQueryListListener;
}
/**
 * Special server-only implementation of MatchMedia that uses the above
 * ServerMediaQueryList as its internal representation
 *
 * Also contains methods to activate and deactivate breakpoints
 */
export declare class ServerMatchMedia extends MatchMedia {
    protected _zone: NgZone;
    protected _platformId: Object;
    protected _document: any;
    protected _registry: Map<string, ServerMediaQueryList>;
    protected _source: BehaviorSubject<MediaChange>;
    protected _observable$: Observable<MediaChange>;
    constructor(_zone: NgZone, _platformId: Object, _document: any);
    /** Activate the specified breakpoint if we're on the server, no-op otherwise */
    activateBreakpoint(bp: BreakPoint): void;
    /** Deactivate the specified breakpoint if we're on the server, no-op otherwise */
    deactivateBreakpoint(bp: BreakPoint): void;
    /**
     * Call window.matchMedia() to build a MediaQueryList; which
     * supports 0..n listeners for activation/deactivation
     */
    protected _buildMQL(query: string): ServerMediaQueryList;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ServerMatchMedia, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<ServerMatchMedia>;
}
declare type MediaQueryListListener = ((this: MediaQueryList, ev: MediaQueryListEvent) => any) | null;
export {};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLW1hdGNoLW1lZGlhLmQudHMiLCJzb3VyY2VzIjpbInNlcnZlci1tYXRjaC1tZWRpYS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEJyZWFrUG9pbnQgfSBmcm9tICcuLi9icmVha3BvaW50cy9icmVhay1wb2ludCc7XG5pbXBvcnQgeyBNYXRjaE1lZGlhIH0gZnJvbSAnLi9tYXRjaC1tZWRpYSc7XG5pbXBvcnQgeyBNZWRpYUNoYW5nZSB9IGZyb20gJy4uL21lZGlhLWNoYW5nZSc7XG4vKipcbiAqIFNwZWNpYWwgc2VydmVyLW9ubHkgY2xhc3MgdG8gc2ltdWxhdGUgYSBNZWRpYVF1ZXJ5TGlzdCBhbmRcbiAqIC0gc3VwcG9ydHMgbWFudWFsIGFjdGl2YXRpb24gdG8gc2ltdWxhdGUgbWVkaWFRdWVyeSBtYXRjaGluZ1xuICogLSBtYW5hZ2VzIGxpc3RlbmVyc1xuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBTZXJ2ZXJNZWRpYVF1ZXJ5TGlzdCBpbXBsZW1lbnRzIE1lZGlhUXVlcnlMaXN0IHtcbiAgICBwcml2YXRlIF9tZWRpYVF1ZXJ5O1xuICAgIHByaXZhdGUgX2lzQWN0aXZlO1xuICAgIHByaXZhdGUgX2xpc3RlbmVycztcbiAgICByZWFkb25seSBtYXRjaGVzOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IG1lZGlhOiBzdHJpbmc7XG4gICAgY29uc3RydWN0b3IoX21lZGlhUXVlcnk6IHN0cmluZyk7XG4gICAgLyoqXG4gICAgICogRGVzdHJveSB0aGUgY3VycmVudCBsaXN0IGJ5IGRlYWN0aXZhdGluZyB0aGVcbiAgICAgKiBsaXN0ZW5lcnMgYW5kIGNsZWFyaW5nIHRoZSBpbnRlcm5hbCBsaXN0XG4gICAgICovXG4gICAgZGVzdHJveSgpOiB2b2lkO1xuICAgIC8qKiBOb3RpZnkgYWxsIGxpc3RlbmVycyB0aGF0ICdtYXRjaGVzID09PSBUUlVFJyAqL1xuICAgIGFjdGl2YXRlKCk6IFNlcnZlck1lZGlhUXVlcnlMaXN0O1xuICAgIC8qKiBOb3RpZnkgYWxsIGxpc3RlbmVycyB0aGF0ICdtYXRjaGVzID09PSBmYWxzZScgKi9cbiAgICBkZWFjdGl2YXRlKCk6IFNlcnZlck1lZGlhUXVlcnlMaXN0O1xuICAgIC8qKiBBZGQgYSBsaXN0ZW5lciB0byBvdXIgaW50ZXJuYWwgbGlzdCB0byBhY3RpdmF0ZSBsYXRlciAqL1xuICAgIGFkZExpc3RlbmVyKGxpc3RlbmVyOiBNZWRpYVF1ZXJ5TGlzdExpc3RlbmVyKTogdm9pZDtcbiAgICAvKiogRG9uJ3QgbmVlZCB0byByZW1vdmUgbGlzdGVuZXJzIGluIHRoZSBzZXJ2ZXIgZW52aXJvbm1lbnQgKi9cbiAgICByZW1vdmVMaXN0ZW5lcihfOiBFdmVudExpc3RlbmVyT3JFdmVudExpc3RlbmVyT2JqZWN0IHwgbnVsbCk6IHZvaWQ7XG4gICAgYWRkRXZlbnRMaXN0ZW5lcjxLIGV4dGVuZHMga2V5b2YgTWVkaWFRdWVyeUxpc3RFdmVudE1hcD4oXzogSywgX186ICh0aGlzOiBNZWRpYVF1ZXJ5TGlzdCwgZXY6IE1lZGlhUXVlcnlMaXN0RXZlbnRNYXBbS10pID0+IGFueSwgX19fPzogYm9vbGVhbiB8IEFkZEV2ZW50TGlzdGVuZXJPcHRpb25zKTogdm9pZDtcbiAgICByZW1vdmVFdmVudExpc3RlbmVyPEsgZXh0ZW5kcyBrZXlvZiBNZWRpYVF1ZXJ5TGlzdEV2ZW50TWFwPihfOiBLLCBfXzogKHRoaXM6IE1lZGlhUXVlcnlMaXN0LCBldjogTWVkaWFRdWVyeUxpc3RFdmVudE1hcFtLXSkgPT4gYW55LCBfX18/OiBib29sZWFuIHwgRXZlbnRMaXN0ZW5lck9wdGlvbnMpOiB2b2lkO1xuICAgIGRpc3BhdGNoRXZlbnQoXzogRXZlbnQpOiBib29sZWFuO1xuICAgIG9uY2hhbmdlOiBNZWRpYVF1ZXJ5TGlzdExpc3RlbmVyO1xufVxuLyoqXG4gKiBTcGVjaWFsIHNlcnZlci1vbmx5IGltcGxlbWVudGF0aW9uIG9mIE1hdGNoTWVkaWEgdGhhdCB1c2VzIHRoZSBhYm92ZVxuICogU2VydmVyTWVkaWFRdWVyeUxpc3QgYXMgaXRzIGludGVybmFsIHJlcHJlc2VudGF0aW9uXG4gKlxuICogQWxzbyBjb250YWlucyBtZXRob2RzIHRvIGFjdGl2YXRlIGFuZCBkZWFjdGl2YXRlIGJyZWFrcG9pbnRzXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFNlcnZlck1hdGNoTWVkaWEgZXh0ZW5kcyBNYXRjaE1lZGlhIHtcbiAgICBwcm90ZWN0ZWQgX3pvbmU6IE5nWm9uZTtcbiAgICBwcm90ZWN0ZWQgX3BsYXRmb3JtSWQ6IE9iamVjdDtcbiAgICBwcm90ZWN0ZWQgX2RvY3VtZW50OiBhbnk7XG4gICAgcHJvdGVjdGVkIF9yZWdpc3RyeTogTWFwPHN0cmluZywgU2VydmVyTWVkaWFRdWVyeUxpc3Q+O1xuICAgIHByb3RlY3RlZCBfc291cmNlOiBCZWhhdmlvclN1YmplY3Q8TWVkaWFDaGFuZ2U+O1xuICAgIHByb3RlY3RlZCBfb2JzZXJ2YWJsZSQ6IE9ic2VydmFibGU8TWVkaWFDaGFuZ2U+O1xuICAgIGNvbnN0cnVjdG9yKF96b25lOiBOZ1pvbmUsIF9wbGF0Zm9ybUlkOiBPYmplY3QsIF9kb2N1bWVudDogYW55KTtcbiAgICAvKiogQWN0aXZhdGUgdGhlIHNwZWNpZmllZCBicmVha3BvaW50IGlmIHdlJ3JlIG9uIHRoZSBzZXJ2ZXIsIG5vLW9wIG90aGVyd2lzZSAqL1xuICAgIGFjdGl2YXRlQnJlYWtwb2ludChicDogQnJlYWtQb2ludCk6IHZvaWQ7XG4gICAgLyoqIERlYWN0aXZhdGUgdGhlIHNwZWNpZmllZCBicmVha3BvaW50IGlmIHdlJ3JlIG9uIHRoZSBzZXJ2ZXIsIG5vLW9wIG90aGVyd2lzZSAqL1xuICAgIGRlYWN0aXZhdGVCcmVha3BvaW50KGJwOiBCcmVha1BvaW50KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBDYWxsIHdpbmRvdy5tYXRjaE1lZGlhKCkgdG8gYnVpbGQgYSBNZWRpYVF1ZXJ5TGlzdDsgd2hpY2hcbiAgICAgKiBzdXBwb3J0cyAwLi5uIGxpc3RlbmVycyBmb3IgYWN0aXZhdGlvbi9kZWFjdGl2YXRpb25cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgX2J1aWxkTVFMKHF1ZXJ5OiBzdHJpbmcpOiBTZXJ2ZXJNZWRpYVF1ZXJ5TGlzdDtcbn1cbmRlY2xhcmUgdHlwZSBNZWRpYVF1ZXJ5TGlzdExpc3RlbmVyID0gKCh0aGlzOiBNZWRpYVF1ZXJ5TGlzdCwgZXY6IE1lZGlhUXVlcnlMaXN0RXZlbnQpID0+IGFueSkgfCBudWxsO1xuZXhwb3J0IHt9O1xuIl19