/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { ElementRef, OnChanges, SimpleChanges, AfterContentInit, OnDestroy, NgZone } from '@angular/core';
import { Directionality } from '@angular/cdk/bidi';
import { BaseDirective, MediaMonitor, StyleUtils } from '@angular/flex-layout/core';
import { Subscription } from 'rxjs';
import { Layout, LayoutDirective } from '../layout/layout';
/**
 * 'layout-padding' styling directive
 *  Defines padding of child elements in a layout container
 */
import * as ɵngcc0 from '@angular/core';
export declare class LayoutGapDirective extends BaseDirective implements AfterContentInit, OnChanges, OnDestroy {
    private _zone;
    private _directionality;
    protected _layout: string;
    protected _layoutWatcher?: Subscription;
    protected _observer?: MutationObserver;
    private _directionWatcher;
    gap: string;
    gapXs: string;
    gapSm: string;
    gapMd: string;
    gapLg: string;
    gapXl: string;
    gapGtXs: string;
    gapGtSm: string;
    gapGtMd: string;
    gapGtLg: string;
    gapLtSm: string;
    gapLtMd: string;
    gapLtLg: string;
    gapLtXl: string;
    constructor(monitor: MediaMonitor, elRef: ElementRef, container: LayoutDirective, _zone: NgZone, _directionality: Directionality, styleUtils: StyleUtils);
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * After the initial onChanges, build an mqActivation object that bridges
     * mql change events to onMediaQueryChange handlers
     */
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    /**
     * Watch for child nodes to be added... and apply the layout gap styles to each.
     * NOTE: this does NOT! differentiate between viewChildren and contentChildren
     */
    protected _watchContentChanges(): void;
    /**
     * Cache the parent container 'flex-direction' and update the 'margin' styles
     */
    protected _onLayoutChange(layout: Layout): void;
    /**
     *
     */
    protected _updateWithValue(value?: string): void;
    /**
     *
     */
    private _buildGridPadding;
    /**
     * Prepare margin CSS, remove any previous explicitly
     * assigned margin assignments
     * Note: this will not work with calc values (negative calc values are invalid)
     */
    private _buildGridMargin;
    /**
     * Prepare margin CSS, remove any previous explicitly
     * assigned margin assignments
     */
    private _buildCSS;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LayoutGapDirective, [null, null, { optional: true; self: true; }, null, null, null]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<LayoutGapDirective, "  [fxLayoutGap],  [fxLayoutGap.xs], [fxLayoutGap.sm], [fxLayoutGap.md], [fxLayoutGap.lg], [fxLayoutGap.xl],  [fxLayoutGap.lt-sm], [fxLayoutGap.lt-md], [fxLayoutGap.lt-lg], [fxLayoutGap.lt-xl],  [fxLayoutGap.gt-xs], [fxLayoutGap.gt-sm], [fxLayoutGap.gt-md], [fxLayoutGap.gt-lg]", never, { "gap": "fxLayoutGap"; "gapXs": "fxLayoutGap.xs"; "gapSm": "fxLayoutGap.sm"; "gapMd": "fxLayoutGap.md"; "gapLg": "fxLayoutGap.lg"; "gapXl": "fxLayoutGap.xl"; "gapGtXs": "fxLayoutGap.gt-xs"; "gapGtSm": "fxLayoutGap.gt-sm"; "gapGtMd": "fxLayoutGap.gt-md"; "gapGtLg": "fxLayoutGap.gt-lg"; "gapLtSm": "fxLayoutGap.lt-sm"; "gapLtMd": "fxLayoutGap.lt-md"; "gapLtLg": "fxLayoutGap.lt-lg"; "gapLtXl": "fxLayoutGap.lt-xl"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF5b3V0LWdhcC5kLnRzIiwic291cmNlcyI6WyJsYXlvdXQtZ2FwLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuaW1wb3J0IHsgRWxlbWVudFJlZiwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzLCBBZnRlckNvbnRlbnRJbml0LCBPbkRlc3Ryb3ksIE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRGlyZWN0aW9uYWxpdHkgfSBmcm9tICdAYW5ndWxhci9jZGsvYmlkaSc7XG5pbXBvcnQgeyBCYXNlRGlyZWN0aXZlLCBNZWRpYU1vbml0b3IsIFN0eWxlVXRpbHMgfSBmcm9tICdAYW5ndWxhci9mbGV4LWxheW91dC9jb3JlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgTGF5b3V0LCBMYXlvdXREaXJlY3RpdmUgfSBmcm9tICcuLi9sYXlvdXQvbGF5b3V0Jztcbi8qKlxuICogJ2xheW91dC1wYWRkaW5nJyBzdHlsaW5nIGRpcmVjdGl2ZVxuICogIERlZmluZXMgcGFkZGluZyBvZiBjaGlsZCBlbGVtZW50cyBpbiBhIGxheW91dCBjb250YWluZXJcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTGF5b3V0R2FwRGlyZWN0aXZlIGV4dGVuZHMgQmFzZURpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQsIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIF96b25lO1xuICAgIHByaXZhdGUgX2RpcmVjdGlvbmFsaXR5O1xuICAgIHByb3RlY3RlZCBfbGF5b3V0OiBzdHJpbmc7XG4gICAgcHJvdGVjdGVkIF9sYXlvdXRXYXRjaGVyPzogU3Vic2NyaXB0aW9uO1xuICAgIHByb3RlY3RlZCBfb2JzZXJ2ZXI/OiBNdXRhdGlvbk9ic2VydmVyO1xuICAgIHByaXZhdGUgX2RpcmVjdGlvbldhdGNoZXI7XG4gICAgZ2FwOiBzdHJpbmc7XG4gICAgZ2FwWHM6IHN0cmluZztcbiAgICBnYXBTbTogc3RyaW5nO1xuICAgIGdhcE1kOiBzdHJpbmc7XG4gICAgZ2FwTGc6IHN0cmluZztcbiAgICBnYXBYbDogc3RyaW5nO1xuICAgIGdhcEd0WHM6IHN0cmluZztcbiAgICBnYXBHdFNtOiBzdHJpbmc7XG4gICAgZ2FwR3RNZDogc3RyaW5nO1xuICAgIGdhcEd0TGc6IHN0cmluZztcbiAgICBnYXBMdFNtOiBzdHJpbmc7XG4gICAgZ2FwTHRNZDogc3RyaW5nO1xuICAgIGdhcEx0TGc6IHN0cmluZztcbiAgICBnYXBMdFhsOiBzdHJpbmc7XG4gICAgY29uc3RydWN0b3IobW9uaXRvcjogTWVkaWFNb25pdG9yLCBlbFJlZjogRWxlbWVudFJlZiwgY29udGFpbmVyOiBMYXlvdXREaXJlY3RpdmUsIF96b25lOiBOZ1pvbmUsIF9kaXJlY3Rpb25hbGl0eTogRGlyZWN0aW9uYWxpdHksIHN0eWxlVXRpbHM6IFN0eWxlVXRpbHMpO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEFmdGVyIHRoZSBpbml0aWFsIG9uQ2hhbmdlcywgYnVpbGQgYW4gbXFBY3RpdmF0aW9uIG9iamVjdCB0aGF0IGJyaWRnZXNcbiAgICAgKiBtcWwgY2hhbmdlIGV2ZW50cyB0byBvbk1lZGlhUXVlcnlDaGFuZ2UgaGFuZGxlcnNcbiAgICAgKi9cbiAgICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFdhdGNoIGZvciBjaGlsZCBub2RlcyB0byBiZSBhZGRlZC4uLiBhbmQgYXBwbHkgdGhlIGxheW91dCBnYXAgc3R5bGVzIHRvIGVhY2guXG4gICAgICogTk9URTogdGhpcyBkb2VzIE5PVCEgZGlmZmVyZW50aWF0ZSBiZXR3ZWVuIHZpZXdDaGlsZHJlbiBhbmQgY29udGVudENoaWxkcmVuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIF93YXRjaENvbnRlbnRDaGFuZ2VzKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQ2FjaGUgdGhlIHBhcmVudCBjb250YWluZXIgJ2ZsZXgtZGlyZWN0aW9uJyBhbmQgdXBkYXRlIHRoZSAnbWFyZ2luJyBzdHlsZXNcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgX29uTGF5b3V0Q2hhbmdlKGxheW91dDogTGF5b3V0KTogdm9pZDtcbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIHByb3RlY3RlZCBfdXBkYXRlV2l0aFZhbHVlKHZhbHVlPzogc3RyaW5nKTogdm9pZDtcbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIHByaXZhdGUgX2J1aWxkR3JpZFBhZGRpbmc7XG4gICAgLyoqXG4gICAgICogUHJlcGFyZSBtYXJnaW4gQ1NTLCByZW1vdmUgYW55IHByZXZpb3VzIGV4cGxpY2l0bHlcbiAgICAgKiBhc3NpZ25lZCBtYXJnaW4gYXNzaWdubWVudHNcbiAgICAgKiBOb3RlOiB0aGlzIHdpbGwgbm90IHdvcmsgd2l0aCBjYWxjIHZhbHVlcyAobmVnYXRpdmUgY2FsYyB2YWx1ZXMgYXJlIGludmFsaWQpXG4gICAgICovXG4gICAgcHJpdmF0ZSBfYnVpbGRHcmlkTWFyZ2luO1xuICAgIC8qKlxuICAgICAqIFByZXBhcmUgbWFyZ2luIENTUywgcmVtb3ZlIGFueSBwcmV2aW91cyBleHBsaWNpdGx5XG4gICAgICogYXNzaWduZWQgbWFyZ2luIGFzc2lnbm1lbnRzXG4gICAgICovXG4gICAgcHJpdmF0ZSBfYnVpbGRDU1M7XG59XG4iXX0=