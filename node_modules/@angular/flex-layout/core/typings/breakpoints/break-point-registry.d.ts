import { BreakPoint } from './break-point';
/**
 * Registry of 1..n MediaQuery breakpoint ranges
 * This is published as a provider and may be overridden from custom, application-specific ranges
 *
 */
import * as ɵngcc0 from '@angular/core';
export declare class BreakPointRegistry {
    private _registry;
    constructor(_registry: BreakPoint[]);
    /**
     * Accessor to raw list
     */
    readonly items: BreakPoint[];
    /**
     * Accessor to sorted list used for registration with matchMedia API
     *
     * NOTE: During breakpoint registration, we want to register the overlaps FIRST
     *       so the non-overlaps will trigger the MatchMedia:BehaviorSubject last!
     *       And the largest, non-overlap, matching breakpoint should be the lastReplay value
     */
    readonly sortedItems: BreakPoint[];
    /**
     * Search breakpoints by alias (e.g. gt-xs)
     */
    findByAlias(alias: string): BreakPoint | null;
    findByQuery(query: string): BreakPoint | null;
    /**
     * Get all the breakpoints whose ranges could overlapping `normal` ranges;
     * e.g. gt-sm overlaps md, lg, and xl
     */
    readonly overlappings: BreakPoint[];
    /**
     * Get list of all registered (non-empty) breakpoint aliases
     */
    readonly aliases: string[];
    /**
     * Aliases are mapped to properties using suffixes
     * e.g.  'gt-sm' for property 'layout'  uses suffix 'GtSm'
     * for property layoutGtSM.
     */
    readonly suffixes: string[];
    static ɵfac: ɵngcc0.ɵɵFactoryDef<BreakPointRegistry, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<BreakPointRegistry>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWstcG9pbnQtcmVnaXN0cnkuZC50cyIsInNvdXJjZXMiOlsiYnJlYWstcG9pbnQtcmVnaXN0cnkuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCcmVha1BvaW50IH0gZnJvbSAnLi9icmVhay1wb2ludCc7XG4vKipcbiAqIFJlZ2lzdHJ5IG9mIDEuLm4gTWVkaWFRdWVyeSBicmVha3BvaW50IHJhbmdlc1xuICogVGhpcyBpcyBwdWJsaXNoZWQgYXMgYSBwcm92aWRlciBhbmQgbWF5IGJlIG92ZXJyaWRkZW4gZnJvbSBjdXN0b20sIGFwcGxpY2F0aW9uLXNwZWNpZmljIHJhbmdlc1xuICpcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQnJlYWtQb2ludFJlZ2lzdHJ5IHtcbiAgICBwcml2YXRlIF9yZWdpc3RyeTtcbiAgICBjb25zdHJ1Y3RvcihfcmVnaXN0cnk6IEJyZWFrUG9pbnRbXSk7XG4gICAgLyoqXG4gICAgICogQWNjZXNzb3IgdG8gcmF3IGxpc3RcbiAgICAgKi9cbiAgICByZWFkb25seSBpdGVtczogQnJlYWtQb2ludFtdO1xuICAgIC8qKlxuICAgICAqIEFjY2Vzc29yIHRvIHNvcnRlZCBsaXN0IHVzZWQgZm9yIHJlZ2lzdHJhdGlvbiB3aXRoIG1hdGNoTWVkaWEgQVBJXG4gICAgICpcbiAgICAgKiBOT1RFOiBEdXJpbmcgYnJlYWtwb2ludCByZWdpc3RyYXRpb24sIHdlIHdhbnQgdG8gcmVnaXN0ZXIgdGhlIG92ZXJsYXBzIEZJUlNUXG4gICAgICogICAgICAgc28gdGhlIG5vbi1vdmVybGFwcyB3aWxsIHRyaWdnZXIgdGhlIE1hdGNoTWVkaWE6QmVoYXZpb3JTdWJqZWN0IGxhc3QhXG4gICAgICogICAgICAgQW5kIHRoZSBsYXJnZXN0LCBub24tb3ZlcmxhcCwgbWF0Y2hpbmcgYnJlYWtwb2ludCBzaG91bGQgYmUgdGhlIGxhc3RSZXBsYXkgdmFsdWVcbiAgICAgKi9cbiAgICByZWFkb25seSBzb3J0ZWRJdGVtczogQnJlYWtQb2ludFtdO1xuICAgIC8qKlxuICAgICAqIFNlYXJjaCBicmVha3BvaW50cyBieSBhbGlhcyAoZS5nLiBndC14cylcbiAgICAgKi9cbiAgICBmaW5kQnlBbGlhcyhhbGlhczogc3RyaW5nKTogQnJlYWtQb2ludCB8IG51bGw7XG4gICAgZmluZEJ5UXVlcnkocXVlcnk6IHN0cmluZyk6IEJyZWFrUG9pbnQgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIEdldCBhbGwgdGhlIGJyZWFrcG9pbnRzIHdob3NlIHJhbmdlcyBjb3VsZCBvdmVybGFwcGluZyBgbm9ybWFsYCByYW5nZXM7XG4gICAgICogZS5nLiBndC1zbSBvdmVybGFwcyBtZCwgbGcsIGFuZCB4bFxuICAgICAqL1xuICAgIHJlYWRvbmx5IG92ZXJsYXBwaW5nczogQnJlYWtQb2ludFtdO1xuICAgIC8qKlxuICAgICAqIEdldCBsaXN0IG9mIGFsbCByZWdpc3RlcmVkIChub24tZW1wdHkpIGJyZWFrcG9pbnQgYWxpYXNlc1xuICAgICAqL1xuICAgIHJlYWRvbmx5IGFsaWFzZXM6IHN0cmluZ1tdO1xuICAgIC8qKlxuICAgICAqIEFsaWFzZXMgYXJlIG1hcHBlZCB0byBwcm9wZXJ0aWVzIHVzaW5nIHN1ZmZpeGVzXG4gICAgICogZS5nLiAgJ2d0LXNtJyBmb3IgcHJvcGVydHkgJ2xheW91dCcgIHVzZXMgc3VmZml4ICdHdFNtJ1xuICAgICAqIGZvciBwcm9wZXJ0eSBsYXlvdXRHdFNNLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHN1ZmZpeGVzOiBzdHJpbmdbXTtcbn1cbiJdfQ==