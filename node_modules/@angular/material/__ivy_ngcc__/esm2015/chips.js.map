{"version":3,"file":"chips.js","sources":["../../../src/lib/chips/chip.ts","../../../src/lib/chips/chip-default-options.ts","../../../src/lib/chips/chip-list.ts","../../../src/lib/chips/chip-input.ts","../../../src/lib/chips/chips-module.ts"],"names":["nextUniqueId"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._ripplesGloballyDisabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[];\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, HOME, END} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this.chips.some(chip => chip._hasFocus);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.disabled = this._disabled);\n    }\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    if (this._lastDestroyedChipIndex != null && this.chips.length) {\n      const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n      this._keyManager.setActiveItem(newChipIndex);\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    this._keyManager.setActiveItem(-1);\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Input, Output, Inject, OnChanges} from '@angular/core';\nimport {MatChipList} from './chip-list';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n  }\n})\nexport class MatChipInput implements OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n"]}