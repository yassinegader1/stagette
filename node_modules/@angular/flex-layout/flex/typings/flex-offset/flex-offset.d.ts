/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { ElementRef, OnInit, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';
import { Directionality } from '@angular/cdk/bidi';
import { BaseDirective, MediaMonitor, StyleDefinition, StyleUtils } from '@angular/flex-layout/core';
import { Subscription } from 'rxjs';
import { Layout, LayoutDirective } from '../layout/layout';
/**
 * 'flex-offset' flexbox styling directive
 * Configures the 'margin-left' of the element in a layout container
 */
import * as ɵngcc0 from '@angular/core';
export declare class FlexOffsetDirective extends BaseDirective implements OnInit, OnChanges, OnDestroy {
    protected _container: LayoutDirective;
    private _directionality;
    private _directionWatcher;
    offset: string;
    offsetXs: string;
    offsetSm: string;
    offsetMd: string;
    offsetLg: string;
    offsetXl: string;
    offsetLtSm: string;
    offsetLtMd: string;
    offsetLtLg: string;
    offsetLtXl: string;
    offsetGtXs: string;
    offsetGtSm: string;
    offsetGtMd: string;
    offsetGtLg: string;
    constructor(monitor: MediaMonitor, elRef: ElementRef, _container: LayoutDirective, _directionality: Directionality, styleUtils: StyleUtils);
    /**
     * For @Input changes on the current mq activation property, see onMediaQueryChanges()
     */
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * Cleanup
     */
    ngOnDestroy(): void;
    /**
     * After the initial onChanges, build an mqActivation object that bridges
     * mql change events to onMediaQueryChange handlers
     */
    ngOnInit(): void;
    /** The flex-direction of this element's host container. Defaults to 'row'. */
    protected _layout: {
        direction: string;
        wrap: boolean;
    };
    /**
     * Subscription to the parent flex container's layout changes.
     * Stored so we can unsubscribe when this directive is destroyed.
     */
    protected _layoutWatcher?: Subscription;
    /**
     * If parent flow-direction changes, then update the margin property
     * used to offset
     */
    protected watchParentFlow(): void;
    /**
     * Caches the parent container's 'flex-direction' and updates the element's style.
     * Used as a handler for layout change events from the parent flex container.
     */
    protected _onLayoutChange(layout?: Layout): void;
    /**
     * Using the current fxFlexOffset value, update the inline CSS
     * NOTE: this will assign `margin-left` if the parent flex-direction == 'row',
     *       otherwise `margin-top` is used for the offset.
     */
    protected _updateWithValue(value?: string | number): void;
    protected _buildCSS(offset?: string | number): StyleDefinition;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<FlexOffsetDirective, [null, null, { optional: true; skipSelf: true; }, null, null]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<FlexOffsetDirective, "  [fxFlexOffset],  [fxFlexOffset.xs], [fxFlexOffset.sm], [fxFlexOffset.md], [fxFlexOffset.lg], [fxFlexOffset.xl],  [fxFlexOffset.lt-sm], [fxFlexOffset.lt-md], [fxFlexOffset.lt-lg], [fxFlexOffset.lt-xl],  [fxFlexOffset.gt-xs], [fxFlexOffset.gt-sm], [fxFlexOffset.gt-md], [fxFlexOffset.gt-lg]", never, { "offset": "fxFlexOffset"; "offsetXs": "fxFlexOffset.xs"; "offsetSm": "fxFlexOffset.sm"; "offsetMd": "fxFlexOffset.md"; "offsetLg": "fxFlexOffset.lg"; "offsetXl": "fxFlexOffset.xl"; "offsetLtSm": "fxFlexOffset.lt-sm"; "offsetLtMd": "fxFlexOffset.lt-md"; "offsetLtLg": "fxFlexOffset.lt-lg"; "offsetLtXl": "fxFlexOffset.lt-xl"; "offsetGtXs": "fxFlexOffset.gt-xs"; "offsetGtSm": "fxFlexOffset.gt-sm"; "offsetGtMd": "fxFlexOffset.gt-md"; "offsetGtLg": "fxFlexOffset.gt-lg"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxleC1vZmZzZXQuZC50cyIsInNvdXJjZXMiOlsiZmxleC1vZmZzZXQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuaW1wb3J0IHsgRWxlbWVudFJlZiwgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRGlyZWN0aW9uYWxpdHkgfSBmcm9tICdAYW5ndWxhci9jZGsvYmlkaSc7XG5pbXBvcnQgeyBCYXNlRGlyZWN0aXZlLCBNZWRpYU1vbml0b3IsIFN0eWxlRGVmaW5pdGlvbiwgU3R5bGVVdGlscyB9IGZyb20gJ0Bhbmd1bGFyL2ZsZXgtbGF5b3V0L2NvcmUnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBMYXlvdXQsIExheW91dERpcmVjdGl2ZSB9IGZyb20gJy4uL2xheW91dC9sYXlvdXQnO1xuLyoqXG4gKiAnZmxleC1vZmZzZXQnIGZsZXhib3ggc3R5bGluZyBkaXJlY3RpdmVcbiAqIENvbmZpZ3VyZXMgdGhlICdtYXJnaW4tbGVmdCcgb2YgdGhlIGVsZW1lbnQgaW4gYSBsYXlvdXQgY29udGFpbmVyXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEZsZXhPZmZzZXREaXJlY3RpdmUgZXh0ZW5kcyBCYXNlRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG4gICAgcHJvdGVjdGVkIF9jb250YWluZXI6IExheW91dERpcmVjdGl2ZTtcbiAgICBwcml2YXRlIF9kaXJlY3Rpb25hbGl0eTtcbiAgICBwcml2YXRlIF9kaXJlY3Rpb25XYXRjaGVyO1xuICAgIG9mZnNldDogc3RyaW5nO1xuICAgIG9mZnNldFhzOiBzdHJpbmc7XG4gICAgb2Zmc2V0U206IHN0cmluZztcbiAgICBvZmZzZXRNZDogc3RyaW5nO1xuICAgIG9mZnNldExnOiBzdHJpbmc7XG4gICAgb2Zmc2V0WGw6IHN0cmluZztcbiAgICBvZmZzZXRMdFNtOiBzdHJpbmc7XG4gICAgb2Zmc2V0THRNZDogc3RyaW5nO1xuICAgIG9mZnNldEx0TGc6IHN0cmluZztcbiAgICBvZmZzZXRMdFhsOiBzdHJpbmc7XG4gICAgb2Zmc2V0R3RYczogc3RyaW5nO1xuICAgIG9mZnNldEd0U206IHN0cmluZztcbiAgICBvZmZzZXRHdE1kOiBzdHJpbmc7XG4gICAgb2Zmc2V0R3RMZzogc3RyaW5nO1xuICAgIGNvbnN0cnVjdG9yKG1vbml0b3I6IE1lZGlhTW9uaXRvciwgZWxSZWY6IEVsZW1lbnRSZWYsIF9jb250YWluZXI6IExheW91dERpcmVjdGl2ZSwgX2RpcmVjdGlvbmFsaXR5OiBEaXJlY3Rpb25hbGl0eSwgc3R5bGVVdGlsczogU3R5bGVVdGlscyk7XG4gICAgLyoqXG4gICAgICogRm9yIEBJbnB1dCBjaGFuZ2VzIG9uIHRoZSBjdXJyZW50IG1xIGFjdGl2YXRpb24gcHJvcGVydHksIHNlZSBvbk1lZGlhUXVlcnlDaGFuZ2VzKClcbiAgICAgKi9cbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBDbGVhbnVwXG4gICAgICovXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBBZnRlciB0aGUgaW5pdGlhbCBvbkNoYW5nZXMsIGJ1aWxkIGFuIG1xQWN0aXZhdGlvbiBvYmplY3QgdGhhdCBicmlkZ2VzXG4gICAgICogbXFsIGNoYW5nZSBldmVudHMgdG8gb25NZWRpYVF1ZXJ5Q2hhbmdlIGhhbmRsZXJzXG4gICAgICovXG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICAvKiogVGhlIGZsZXgtZGlyZWN0aW9uIG9mIHRoaXMgZWxlbWVudCdzIGhvc3QgY29udGFpbmVyLiBEZWZhdWx0cyB0byAncm93Jy4gKi9cbiAgICBwcm90ZWN0ZWQgX2xheW91dDoge1xuICAgICAgICBkaXJlY3Rpb246IHN0cmluZztcbiAgICAgICAgd3JhcDogYm9vbGVhbjtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFN1YnNjcmlwdGlvbiB0byB0aGUgcGFyZW50IGZsZXggY29udGFpbmVyJ3MgbGF5b3V0IGNoYW5nZXMuXG4gICAgICogU3RvcmVkIHNvIHdlIGNhbiB1bnN1YnNjcmliZSB3aGVuIHRoaXMgZGlyZWN0aXZlIGlzIGRlc3Ryb3llZC5cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgX2xheW91dFdhdGNoZXI/OiBTdWJzY3JpcHRpb247XG4gICAgLyoqXG4gICAgICogSWYgcGFyZW50IGZsb3ctZGlyZWN0aW9uIGNoYW5nZXMsIHRoZW4gdXBkYXRlIHRoZSBtYXJnaW4gcHJvcGVydHlcbiAgICAgKiB1c2VkIHRvIG9mZnNldFxuICAgICAqL1xuICAgIHByb3RlY3RlZCB3YXRjaFBhcmVudEZsb3coKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBDYWNoZXMgdGhlIHBhcmVudCBjb250YWluZXIncyAnZmxleC1kaXJlY3Rpb24nIGFuZCB1cGRhdGVzIHRoZSBlbGVtZW50J3Mgc3R5bGUuXG4gICAgICogVXNlZCBhcyBhIGhhbmRsZXIgZm9yIGxheW91dCBjaGFuZ2UgZXZlbnRzIGZyb20gdGhlIHBhcmVudCBmbGV4IGNvbnRhaW5lci5cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgX29uTGF5b3V0Q2hhbmdlKGxheW91dD86IExheW91dCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogVXNpbmcgdGhlIGN1cnJlbnQgZnhGbGV4T2Zmc2V0IHZhbHVlLCB1cGRhdGUgdGhlIGlubGluZSBDU1NcbiAgICAgKiBOT1RFOiB0aGlzIHdpbGwgYXNzaWduIGBtYXJnaW4tbGVmdGAgaWYgdGhlIHBhcmVudCBmbGV4LWRpcmVjdGlvbiA9PSAncm93JyxcbiAgICAgKiAgICAgICBvdGhlcndpc2UgYG1hcmdpbi10b3BgIGlzIHVzZWQgZm9yIHRoZSBvZmZzZXQuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIF91cGRhdGVXaXRoVmFsdWUodmFsdWU/OiBzdHJpbmcgfCBudW1iZXIpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBfYnVpbGRDU1Mob2Zmc2V0Pzogc3RyaW5nIHwgbnVtYmVyKTogU3R5bGVEZWZpbml0aW9uO1xufVxuIl19