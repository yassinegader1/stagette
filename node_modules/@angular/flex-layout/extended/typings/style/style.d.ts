/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { DoCheck, ElementRef, KeyValueDiffers, OnDestroy, OnChanges, Renderer2, SimpleChanges, OnInit } from '@angular/core';
import { NgStyle } from '@angular/common';
import { DomSanitizer } from '@angular/platform-browser';
import { BaseDirective, BaseDirectiveAdapter, MediaMonitor, StyleUtils } from '@angular/flex-layout/core';
import { NgStyleType, NgStyleMap } from './style-transforms';
/**
 * Directive to add responsive support for ngStyle.
 *
 */
import * as ɵngcc0 from '@angular/core';
export declare class StyleDirective extends BaseDirective implements DoCheck, OnChanges, OnDestroy, OnInit {
    private monitor;
    protected _sanitizer: DomSanitizer;
    protected _ngEl: ElementRef;
    protected _renderer: Renderer2;
    protected _differs: KeyValueDiffers;
    private readonly _ngStyleInstance;
    protected _styler: StyleUtils;
    /**
     * Intercept ngStyle assignments so we cache the default styles
     * which are merged with activated styles or used as fallbacks.
     */
    ngStyleBase: NgStyleType;
    ngStyleXs: NgStyleType;
    ngStyleSm: NgStyleType;
    ngStyleMd: NgStyleType;
    ngStyleLg: NgStyleType;
    ngStyleXl: NgStyleType;
    ngStyleLtSm: NgStyleType;
    ngStyleLtMd: NgStyleType;
    ngStyleLtLg: NgStyleType;
    ngStyleLtXl: NgStyleType;
    ngStyleGtXs: NgStyleType;
    ngStyleGtSm: NgStyleType;
    ngStyleGtMd: NgStyleType;
    ngStyleGtLg: NgStyleType;
    /**
     *  Constructor for the ngStyle subclass; which adds selectors and
     *  a MediaQuery Activation Adapter
     */
    constructor(monitor: MediaMonitor, _sanitizer: DomSanitizer, _ngEl: ElementRef, _renderer: Renderer2, _differs: KeyValueDiffers, _ngStyleInstance: NgStyle, _styler: StyleUtils);
    /** For @Input changes on the current mq activation property */
    ngOnChanges(changes: SimpleChanges): void;
    ngOnInit(): void;
    /** For ChangeDetectionStrategy.onPush and ngOnChanges() updates */
    ngDoCheck(): void;
    ngOnDestroy(): void;
    /**
     * Build an mqActivation object that bridges
     * mql change events to onMediaQueryChange handlers
     */
    protected _configureMQListener(baseKey?: string): void;
    /** Build intercept to convert raw strings to ngStyleMap */
    protected _buildCacheInterceptor(): void;
    /**
     * Convert raw strings to ngStyleMap; which is required by ngStyle
     * NOTE: Raw string key-value pairs MUST be delimited by `;`
     *       Comma-delimiters are not supported due to complexities of
     *       possible style values such as `rgba(x,x,x,x)` and others
     */
    protected _buildStyleMap(styles: NgStyleType): string | NgStyleMap;
    /** Initial lookup of raw 'class' value (if any) */
    protected _fallbackToStyle(): void;
    /**
     * Special adapter to cross-cut responsive behaviors
     * into the StyleDirective
     */
    protected _base: BaseDirectiveAdapter;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<StyleDirective, [null, null, null, null, null, { optional: true; self: true; }, null]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<StyleDirective, "    [ngStyle.xs], [ngStyle.sm], [ngStyle.md], [ngStyle.lg], [ngStyle.xl],    [ngStyle.lt-sm], [ngStyle.lt-md], [ngStyle.lt-lg], [ngStyle.lt-xl],    [ngStyle.gt-xs], [ngStyle.gt-sm], [ngStyle.gt-md], [ngStyle.gt-lg]  ", never, { "ngStyleBase": "ngStyle"; "ngStyleXs": "ngStyle.xs"; "ngStyleSm": "ngStyle.sm"; "ngStyleMd": "ngStyle.md"; "ngStyleLg": "ngStyle.lg"; "ngStyleXl": "ngStyle.xl"; "ngStyleLtSm": "ngStyle.lt-sm"; "ngStyleLtMd": "ngStyle.lt-md"; "ngStyleLtLg": "ngStyle.lt-lg"; "ngStyleLtXl": "ngStyle.lt-xl"; "ngStyleGtXs": "ngStyle.gt-xs"; "ngStyleGtSm": "ngStyle.gt-sm"; "ngStyleGtMd": "ngStyle.gt-md"; "ngStyleGtLg": "ngStyle.gt-lg"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3R5bGUuZC50cyIsInNvdXJjZXMiOlsic3R5bGUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmltcG9ydCB7IERvQ2hlY2ssIEVsZW1lbnRSZWYsIEtleVZhbHVlRGlmZmVycywgT25EZXN0cm95LCBPbkNoYW5nZXMsIFJlbmRlcmVyMiwgU2ltcGxlQ2hhbmdlcywgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ1N0eWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IERvbVNhbml0aXplciB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuaW1wb3J0IHsgQmFzZURpcmVjdGl2ZSwgQmFzZURpcmVjdGl2ZUFkYXB0ZXIsIE1lZGlhTW9uaXRvciwgU3R5bGVVdGlscyB9IGZyb20gJ0Bhbmd1bGFyL2ZsZXgtbGF5b3V0L2NvcmUnO1xuaW1wb3J0IHsgTmdTdHlsZVR5cGUsIE5nU3R5bGVNYXAgfSBmcm9tICcuL3N0eWxlLXRyYW5zZm9ybXMnO1xuLyoqXG4gKiBEaXJlY3RpdmUgdG8gYWRkIHJlc3BvbnNpdmUgc3VwcG9ydCBmb3IgbmdTdHlsZS5cbiAqXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFN0eWxlRGlyZWN0aXZlIGV4dGVuZHMgQmFzZURpcmVjdGl2ZSBpbXBsZW1lbnRzIERvQ2hlY2ssIE9uQ2hhbmdlcywgT25EZXN0cm95LCBPbkluaXQge1xuICAgIHByaXZhdGUgbW9uaXRvcjtcbiAgICBwcm90ZWN0ZWQgX3Nhbml0aXplcjogRG9tU2FuaXRpemVyO1xuICAgIHByb3RlY3RlZCBfbmdFbDogRWxlbWVudFJlZjtcbiAgICBwcm90ZWN0ZWQgX3JlbmRlcmVyOiBSZW5kZXJlcjI7XG4gICAgcHJvdGVjdGVkIF9kaWZmZXJzOiBLZXlWYWx1ZURpZmZlcnM7XG4gICAgcHJpdmF0ZSByZWFkb25seSBfbmdTdHlsZUluc3RhbmNlO1xuICAgIHByb3RlY3RlZCBfc3R5bGVyOiBTdHlsZVV0aWxzO1xuICAgIC8qKlxuICAgICAqIEludGVyY2VwdCBuZ1N0eWxlIGFzc2lnbm1lbnRzIHNvIHdlIGNhY2hlIHRoZSBkZWZhdWx0IHN0eWxlc1xuICAgICAqIHdoaWNoIGFyZSBtZXJnZWQgd2l0aCBhY3RpdmF0ZWQgc3R5bGVzIG9yIHVzZWQgYXMgZmFsbGJhY2tzLlxuICAgICAqL1xuICAgIG5nU3R5bGVCYXNlOiBOZ1N0eWxlVHlwZTtcbiAgICBuZ1N0eWxlWHM6IE5nU3R5bGVUeXBlO1xuICAgIG5nU3R5bGVTbTogTmdTdHlsZVR5cGU7XG4gICAgbmdTdHlsZU1kOiBOZ1N0eWxlVHlwZTtcbiAgICBuZ1N0eWxlTGc6IE5nU3R5bGVUeXBlO1xuICAgIG5nU3R5bGVYbDogTmdTdHlsZVR5cGU7XG4gICAgbmdTdHlsZUx0U206IE5nU3R5bGVUeXBlO1xuICAgIG5nU3R5bGVMdE1kOiBOZ1N0eWxlVHlwZTtcbiAgICBuZ1N0eWxlTHRMZzogTmdTdHlsZVR5cGU7XG4gICAgbmdTdHlsZUx0WGw6IE5nU3R5bGVUeXBlO1xuICAgIG5nU3R5bGVHdFhzOiBOZ1N0eWxlVHlwZTtcbiAgICBuZ1N0eWxlR3RTbTogTmdTdHlsZVR5cGU7XG4gICAgbmdTdHlsZUd0TWQ6IE5nU3R5bGVUeXBlO1xuICAgIG5nU3R5bGVHdExnOiBOZ1N0eWxlVHlwZTtcbiAgICAvKipcbiAgICAgKiAgQ29uc3RydWN0b3IgZm9yIHRoZSBuZ1N0eWxlIHN1YmNsYXNzOyB3aGljaCBhZGRzIHNlbGVjdG9ycyBhbmRcbiAgICAgKiAgYSBNZWRpYVF1ZXJ5IEFjdGl2YXRpb24gQWRhcHRlclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG1vbml0b3I6IE1lZGlhTW9uaXRvciwgX3Nhbml0aXplcjogRG9tU2FuaXRpemVyLCBfbmdFbDogRWxlbWVudFJlZiwgX3JlbmRlcmVyOiBSZW5kZXJlcjIsIF9kaWZmZXJzOiBLZXlWYWx1ZURpZmZlcnMsIF9uZ1N0eWxlSW5zdGFuY2U6IE5nU3R5bGUsIF9zdHlsZXI6IFN0eWxlVXRpbHMpO1xuICAgIC8qKiBGb3IgQElucHV0IGNoYW5nZXMgb24gdGhlIGN1cnJlbnQgbXEgYWN0aXZhdGlvbiBwcm9wZXJ0eSAqL1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgLyoqIEZvciBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5vblB1c2ggYW5kIG5nT25DaGFuZ2VzKCkgdXBkYXRlcyAqL1xuICAgIG5nRG9DaGVjaygpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQnVpbGQgYW4gbXFBY3RpdmF0aW9uIG9iamVjdCB0aGF0IGJyaWRnZXNcbiAgICAgKiBtcWwgY2hhbmdlIGV2ZW50cyB0byBvbk1lZGlhUXVlcnlDaGFuZ2UgaGFuZGxlcnNcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgX2NvbmZpZ3VyZU1RTGlzdGVuZXIoYmFzZUtleT86IHN0cmluZyk6IHZvaWQ7XG4gICAgLyoqIEJ1aWxkIGludGVyY2VwdCB0byBjb252ZXJ0IHJhdyBzdHJpbmdzIHRvIG5nU3R5bGVNYXAgKi9cbiAgICBwcm90ZWN0ZWQgX2J1aWxkQ2FjaGVJbnRlcmNlcHRvcigpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIENvbnZlcnQgcmF3IHN0cmluZ3MgdG8gbmdTdHlsZU1hcDsgd2hpY2ggaXMgcmVxdWlyZWQgYnkgbmdTdHlsZVxuICAgICAqIE5PVEU6IFJhdyBzdHJpbmcga2V5LXZhbHVlIHBhaXJzIE1VU1QgYmUgZGVsaW1pdGVkIGJ5IGA7YFxuICAgICAqICAgICAgIENvbW1hLWRlbGltaXRlcnMgYXJlIG5vdCBzdXBwb3J0ZWQgZHVlIHRvIGNvbXBsZXhpdGllcyBvZlxuICAgICAqICAgICAgIHBvc3NpYmxlIHN0eWxlIHZhbHVlcyBzdWNoIGFzIGByZ2JhKHgseCx4LHgpYCBhbmQgb3RoZXJzXG4gICAgICovXG4gICAgcHJvdGVjdGVkIF9idWlsZFN0eWxlTWFwKHN0eWxlczogTmdTdHlsZVR5cGUpOiBzdHJpbmcgfCBOZ1N0eWxlTWFwO1xuICAgIC8qKiBJbml0aWFsIGxvb2t1cCBvZiByYXcgJ2NsYXNzJyB2YWx1ZSAoaWYgYW55KSAqL1xuICAgIHByb3RlY3RlZCBfZmFsbGJhY2tUb1N0eWxlKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogU3BlY2lhbCBhZGFwdGVyIHRvIGNyb3NzLWN1dCByZXNwb25zaXZlIGJlaGF2aW9yc1xuICAgICAqIGludG8gdGhlIFN0eWxlRGlyZWN0aXZlXG4gICAgICovXG4gICAgcHJvdGVjdGVkIF9iYXNlOiBCYXNlRGlyZWN0aXZlQWRhcHRlcjtcbn1cbiJdfQ==