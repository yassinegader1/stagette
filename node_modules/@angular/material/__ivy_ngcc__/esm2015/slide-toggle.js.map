{"version":3,"file":"slide-toggle.js","sources":["../../../src/lib/slide-toggle/slide-toggle-config.ts","../../../src/lib/slide-toggle/slide-toggle.ts","../../../src/lib/slide-toggle/slide-toggle-module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event always fire when user toggle the slide toggle, but does not mean the slide toggle's\n   * value is changed. The event does not fire when user drag to change the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event always fire when user drag the slide toggle to make a change that greater than 50%.\n   * It does not mean the slide toggle's value is changed. The event does not fire when user toggle\n   * the slide toggle to change the slide toggle's value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @breaking-change 7.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n      // Angular does not expect events to be raised during change detection, so any state change\n      // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n      // See https://github.com/angular/angular/issues/17793. To work around this, we defer telling\n      // the form control it has been touched until the next tick.\n      Promise.resolve().then(() => this.onTouched());\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n"]}