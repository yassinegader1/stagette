/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { DoCheck, ElementRef, IterableDiffers, KeyValueDiffers, OnChanges, OnDestroy, Renderer2, SimpleChanges, OnInit } from '@angular/core';
import { NgClass } from '@angular/common';
import { BaseDirective, BaseDirectiveAdapter, MediaMonitor, StyleUtils } from '@angular/flex-layout/core';
/** NgClass allowed inputs **/
import * as ɵngcc0 from '@angular/core';
export declare type NgClassType = string | string[] | Set<string> | {
    [klass: string]: any;
};
/**
 * Directive to add responsive support for ngClass.
 * This maintains the core functionality of 'ngClass' and adds responsive API
 * Note: this class is a no-op when rendered on the server
 */
export declare class ClassDirective extends BaseDirective implements DoCheck, OnChanges, OnDestroy, OnInit {
    protected monitor: MediaMonitor;
    protected _iterableDiffers: IterableDiffers;
    protected _keyValueDiffers: KeyValueDiffers;
    protected _ngEl: ElementRef;
    protected _renderer: Renderer2;
    private readonly _ngClassInstance;
    protected _styler: StyleUtils;
    /**
     * Intercept ngClass assignments so we cache the default classes
     * which are merged with activated styles or used as fallbacks.
     * Note: Base ngClass values are applied during ngDoCheck()
     */
    ngClassBase: NgClassType;
    /**
     * Capture class assignments so we cache the default classes
     * which are merged with activated styles and used as fallbacks.
     */
    klazz: string;
    ngClassXs: NgClassType;
    ngClassSm: NgClassType;
    ngClassMd: NgClassType;
    ngClassLg: NgClassType;
    ngClassXl: NgClassType;
    ngClassLtSm: NgClassType;
    ngClassLtMd: NgClassType;
    ngClassLtLg: NgClassType;
    ngClassLtXl: NgClassType;
    ngClassGtXs: NgClassType;
    ngClassGtSm: NgClassType;
    ngClassGtMd: NgClassType;
    ngClassGtLg: NgClassType;
    constructor(monitor: MediaMonitor, _iterableDiffers: IterableDiffers, _keyValueDiffers: KeyValueDiffers, _ngEl: ElementRef, _renderer: Renderer2, _ngClassInstance: NgClass, _styler: StyleUtils);
    /**
     * For @Input changes on the current mq activation property
     */
    ngOnChanges(changes: SimpleChanges): void;
    ngOnInit(): void;
    /**
     * For ChangeDetectionStrategy.onPush and ngOnChanges() updates
     */
    ngDoCheck(): void;
    ngOnDestroy(): void;
    /**
     * Build an mqActivation object that bridges mql change events to onMediaQueryChange handlers
     * NOTE: We delegate subsequent activity to the NgClass logic
     *       Identify the activated input value and update the ngClass iterables...
     *       Use ngDoCheck() to actually apply the values to the element
     */
    protected _configureMQListener(baseKey?: string): void;
    /**
     * Special adapter to cross-cut responsive behaviors and capture mediaQuery changes
     * Delegate value changes to the internal `_ngClassInstance` for processing
     */
    protected _base: BaseDirectiveAdapter;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ClassDirective, [null, null, null, null, null, { optional: true; self: true; }, null]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ClassDirective, "    [ngClass.xs], [ngClass.sm], [ngClass.md], [ngClass.lg], [ngClass.xl],    [ngClass.lt-sm], [ngClass.lt-md], [ngClass.lt-lg], [ngClass.lt-xl],    [ngClass.gt-xs], [ngClass.gt-sm], [ngClass.gt-md], [ngClass.gt-lg]  ", never, { "ngClassBase": "ngClass"; "klazz": "class"; "ngClassXs": "ngClass.xs"; "ngClassSm": "ngClass.sm"; "ngClassMd": "ngClass.md"; "ngClassLg": "ngClass.lg"; "ngClassXl": "ngClass.xl"; "ngClassLtSm": "ngClass.lt-sm"; "ngClassLtMd": "ngClass.lt-md"; "ngClassLtLg": "ngClass.lt-lg"; "ngClassLtXl": "ngClass.lt-xl"; "ngClassGtXs": "ngClass.gt-xs"; "ngClassGtSm": "ngClass.gt-sm"; "ngClassGtMd": "ngClass.gt-md"; "ngClassGtLg": "ngClass.gt-lg"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xhc3MuZC50cyIsInNvdXJjZXMiOlsiY2xhc3MuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmltcG9ydCB7IERvQ2hlY2ssIEVsZW1lbnRSZWYsIEl0ZXJhYmxlRGlmZmVycywgS2V5VmFsdWVEaWZmZXJzLCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgUmVuZGVyZXIyLCBTaW1wbGVDaGFuZ2VzLCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5nQ2xhc3MgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgQmFzZURpcmVjdGl2ZSwgQmFzZURpcmVjdGl2ZUFkYXB0ZXIsIE1lZGlhTW9uaXRvciwgU3R5bGVVdGlscyB9IGZyb20gJ0Bhbmd1bGFyL2ZsZXgtbGF5b3V0L2NvcmUnO1xuLyoqIE5nQ2xhc3MgYWxsb3dlZCBpbnB1dHMgKiovXG5leHBvcnQgZGVjbGFyZSB0eXBlIE5nQ2xhc3NUeXBlID0gc3RyaW5nIHwgc3RyaW5nW10gfCBTZXQ8c3RyaW5nPiB8IHtcbiAgICBba2xhc3M6IHN0cmluZ106IGFueTtcbn07XG4vKipcbiAqIERpcmVjdGl2ZSB0byBhZGQgcmVzcG9uc2l2ZSBzdXBwb3J0IGZvciBuZ0NsYXNzLlxuICogVGhpcyBtYWludGFpbnMgdGhlIGNvcmUgZnVuY3Rpb25hbGl0eSBvZiAnbmdDbGFzcycgYW5kIGFkZHMgcmVzcG9uc2l2ZSBBUElcbiAqIE5vdGU6IHRoaXMgY2xhc3MgaXMgYSBuby1vcCB3aGVuIHJlbmRlcmVkIG9uIHRoZSBzZXJ2ZXJcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQ2xhc3NEaXJlY3RpdmUgZXh0ZW5kcyBCYXNlRGlyZWN0aXZlIGltcGxlbWVudHMgRG9DaGVjaywgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIE9uSW5pdCB7XG4gICAgcHJvdGVjdGVkIG1vbml0b3I6IE1lZGlhTW9uaXRvcjtcbiAgICBwcm90ZWN0ZWQgX2l0ZXJhYmxlRGlmZmVyczogSXRlcmFibGVEaWZmZXJzO1xuICAgIHByb3RlY3RlZCBfa2V5VmFsdWVEaWZmZXJzOiBLZXlWYWx1ZURpZmZlcnM7XG4gICAgcHJvdGVjdGVkIF9uZ0VsOiBFbGVtZW50UmVmO1xuICAgIHByb3RlY3RlZCBfcmVuZGVyZXI6IFJlbmRlcmVyMjtcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9uZ0NsYXNzSW5zdGFuY2U7XG4gICAgcHJvdGVjdGVkIF9zdHlsZXI6IFN0eWxlVXRpbHM7XG4gICAgLyoqXG4gICAgICogSW50ZXJjZXB0IG5nQ2xhc3MgYXNzaWdubWVudHMgc28gd2UgY2FjaGUgdGhlIGRlZmF1bHQgY2xhc3Nlc1xuICAgICAqIHdoaWNoIGFyZSBtZXJnZWQgd2l0aCBhY3RpdmF0ZWQgc3R5bGVzIG9yIHVzZWQgYXMgZmFsbGJhY2tzLlxuICAgICAqIE5vdGU6IEJhc2UgbmdDbGFzcyB2YWx1ZXMgYXJlIGFwcGxpZWQgZHVyaW5nIG5nRG9DaGVjaygpXG4gICAgICovXG4gICAgbmdDbGFzc0Jhc2U6IE5nQ2xhc3NUeXBlO1xuICAgIC8qKlxuICAgICAqIENhcHR1cmUgY2xhc3MgYXNzaWdubWVudHMgc28gd2UgY2FjaGUgdGhlIGRlZmF1bHQgY2xhc3Nlc1xuICAgICAqIHdoaWNoIGFyZSBtZXJnZWQgd2l0aCBhY3RpdmF0ZWQgc3R5bGVzIGFuZCB1c2VkIGFzIGZhbGxiYWNrcy5cbiAgICAgKi9cbiAgICBrbGF6ejogc3RyaW5nO1xuICAgIG5nQ2xhc3NYczogTmdDbGFzc1R5cGU7XG4gICAgbmdDbGFzc1NtOiBOZ0NsYXNzVHlwZTtcbiAgICBuZ0NsYXNzTWQ6IE5nQ2xhc3NUeXBlO1xuICAgIG5nQ2xhc3NMZzogTmdDbGFzc1R5cGU7XG4gICAgbmdDbGFzc1hsOiBOZ0NsYXNzVHlwZTtcbiAgICBuZ0NsYXNzTHRTbTogTmdDbGFzc1R5cGU7XG4gICAgbmdDbGFzc0x0TWQ6IE5nQ2xhc3NUeXBlO1xuICAgIG5nQ2xhc3NMdExnOiBOZ0NsYXNzVHlwZTtcbiAgICBuZ0NsYXNzTHRYbDogTmdDbGFzc1R5cGU7XG4gICAgbmdDbGFzc0d0WHM6IE5nQ2xhc3NUeXBlO1xuICAgIG5nQ2xhc3NHdFNtOiBOZ0NsYXNzVHlwZTtcbiAgICBuZ0NsYXNzR3RNZDogTmdDbGFzc1R5cGU7XG4gICAgbmdDbGFzc0d0TGc6IE5nQ2xhc3NUeXBlO1xuICAgIGNvbnN0cnVjdG9yKG1vbml0b3I6IE1lZGlhTW9uaXRvciwgX2l0ZXJhYmxlRGlmZmVyczogSXRlcmFibGVEaWZmZXJzLCBfa2V5VmFsdWVEaWZmZXJzOiBLZXlWYWx1ZURpZmZlcnMsIF9uZ0VsOiBFbGVtZW50UmVmLCBfcmVuZGVyZXI6IFJlbmRlcmVyMiwgX25nQ2xhc3NJbnN0YW5jZTogTmdDbGFzcywgX3N0eWxlcjogU3R5bGVVdGlscyk7XG4gICAgLyoqXG4gICAgICogRm9yIEBJbnB1dCBjaGFuZ2VzIG9uIHRoZSBjdXJyZW50IG1xIGFjdGl2YXRpb24gcHJvcGVydHlcbiAgICAgKi9cbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEZvciBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5vblB1c2ggYW5kIG5nT25DaGFuZ2VzKCkgdXBkYXRlc1xuICAgICAqL1xuICAgIG5nRG9DaGVjaygpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQnVpbGQgYW4gbXFBY3RpdmF0aW9uIG9iamVjdCB0aGF0IGJyaWRnZXMgbXFsIGNoYW5nZSBldmVudHMgdG8gb25NZWRpYVF1ZXJ5Q2hhbmdlIGhhbmRsZXJzXG4gICAgICogTk9URTogV2UgZGVsZWdhdGUgc3Vic2VxdWVudCBhY3Rpdml0eSB0byB0aGUgTmdDbGFzcyBsb2dpY1xuICAgICAqICAgICAgIElkZW50aWZ5IHRoZSBhY3RpdmF0ZWQgaW5wdXQgdmFsdWUgYW5kIHVwZGF0ZSB0aGUgbmdDbGFzcyBpdGVyYWJsZXMuLi5cbiAgICAgKiAgICAgICBVc2UgbmdEb0NoZWNrKCkgdG8gYWN0dWFsbHkgYXBwbHkgdGhlIHZhbHVlcyB0byB0aGUgZWxlbWVudFxuICAgICAqL1xuICAgIHByb3RlY3RlZCBfY29uZmlndXJlTVFMaXN0ZW5lcihiYXNlS2V5Pzogc3RyaW5nKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBTcGVjaWFsIGFkYXB0ZXIgdG8gY3Jvc3MtY3V0IHJlc3BvbnNpdmUgYmVoYXZpb3JzIGFuZCBjYXB0dXJlIG1lZGlhUXVlcnkgY2hhbmdlc1xuICAgICAqIERlbGVnYXRlIHZhbHVlIGNoYW5nZXMgdG8gdGhlIGludGVybmFsIGBfbmdDbGFzc0luc3RhbmNlYCBmb3IgcHJvY2Vzc2luZ1xuICAgICAqL1xuICAgIHByb3RlY3RlZCBfYmFzZTogQmFzZURpcmVjdGl2ZUFkYXB0ZXI7XG59XG4iXX0=