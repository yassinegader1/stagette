{"version":3,"file":"platform.js","sources":["../../../src/cdk/platform/platform.ts","../../../src/cdk/platform/features.ts","../../../src/cdk/platform/platform-module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, Optional, PLATFORM_ID} from '@angular/core';\nimport {isPlatformBrowser} from '@angular/common';\n\n\n// Whether the current platform supports the V8 Break Iterator. The V8 check\n// is necessary to detect all Blink based browsers.\nconst hasV8BreakIterator = (typeof Intl !== 'undefined' && (Intl as any).v8BreakIterator);\n\n/**\n * Service to detect the current platform by comparing the userAgent strings and\n * checking browser-specific global properties.\n */\n@Injectable({providedIn: 'root'})\nexport class Platform {\n  /**\n   * Whether the Angular application is being rendered in the browser.\n   * We want to use the Angular platform check because if the Document is shimmed\n   * without the navigator, the following checks will fail. This is preferred because\n   * sometimes the Document may be shimmed without the user's knowledge or intention\n   */\n  isBrowser: boolean = this._platformId ?\n      isPlatformBrowser(this._platformId) : typeof document === 'object' && !!document;\n\n  /** Whether the current browser is Microsoft Edge. */\n  EDGE: boolean = this.isBrowser && /(edge)/i.test(navigator.userAgent);\n\n  /** Whether the current rendering engine is Microsoft Trident. */\n  TRIDENT: boolean = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent);\n\n  /** Whether the current rendering engine is Blink. */\n  // EdgeHTML and Trident mock Blink specific things and need to be excluded from this check.\n  BLINK: boolean = this.isBrowser && (!!((window as any).chrome || hasV8BreakIterator) &&\n      typeof CSS !== 'undefined' && !this.EDGE && !this.TRIDENT);\n\n  /** Whether the current rendering engine is WebKit. */\n  // Webkit is part of the userAgent in EdgeHTML, Blink and Trident. Therefore we need to\n  // ensure that Webkit runs standalone and is not used as another engine's base.\n  WEBKIT: boolean = this.isBrowser &&\n      /AppleWebKit/i.test(navigator.userAgent) && !this.BLINK && !this.EDGE && !this.TRIDENT;\n\n  /** Whether the current platform is Apple iOS. */\n  IOS: boolean = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) &&\n      !(window as any).MSStream;\n\n  /** Whether the current browser is Firefox. */\n  // It's difficult to detect the plain Gecko engine, because most of the browsers identify\n  // them self as Gecko-like browsers and modify the userAgent's according to that.\n  // Since we only cover one explicit Firefox case, we can simply check for Firefox\n  // instead of having an unstable check for Gecko.\n  FIREFOX: boolean = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);\n\n  /** Whether the current platform is Android. */\n  // Trident on mobile adds the android platform to the userAgent to trick detections.\n  ANDROID: boolean = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT;\n\n  /** Whether the current browser is Safari. */\n  // Safari browsers will include the Safari keyword in their userAgent. Some browsers may fake\n  // this and just place the Safari keyword in the userAgent. To be more safe about Safari every\n  // Safari browser should also use Webkit as its layout engine.\n  SAFARI: boolean = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT;\n\n  /**\n   * @breaking-change v7.0.0 remove optional decorator\n   */\n  constructor(@Optional() @Inject(PLATFORM_ID) private _platformId?: Object) {\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Cached result of whether the user's browser supports passive event listeners. */\nlet supportsPassiveEvents: boolean;\n\n/**\n * Checks whether the user's browser supports passive event listeners.\n * See: https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n */\nexport function supportsPassiveEventListeners(): boolean {\n  if (supportsPassiveEvents == null && typeof window !== 'undefined') {\n    try {\n      window.addEventListener('test', null!, Object.defineProperty({}, 'passive', {\n        get: () => supportsPassiveEvents = true\n      }));\n    } finally {\n      supportsPassiveEvents = supportsPassiveEvents || false;\n    }\n  }\n\n  return supportsPassiveEvents;\n}\n\n/** Check whether the browser supports scroll behaviors. */\nexport function supportsScrollBehavior(): boolean {\n  return !!(document && document.documentElement && document.documentElement.style &&\n      'scrollBehavior' in document.documentElement.style);\n}\n\n/** Cached result Set of input types support by the current browser. */\nlet supportedInputTypes: Set<string>;\n\n/** Types of `<input>` that *might* be supported. */\nconst candidateInputTypes = [\n  // `color` must come first. Chrome 56 shows a warning if we change the type to `color` after\n  // first changing it to something else:\n  // The specified value \"\" does not conform to the required format.\n  // The format is \"#rrggbb\" where rr, gg, bb are two-digit hexadecimal numbers.\n  'color',\n  'button',\n  'checkbox',\n  'date',\n  'datetime-local',\n  'email',\n  'file',\n  'hidden',\n  'image',\n  'month',\n  'number',\n  'password',\n  'radio',\n  'range',\n  'reset',\n  'search',\n  'submit',\n  'tel',\n  'text',\n  'time',\n  'url',\n  'week',\n];\n\n/** @returns The input types supported by this browser. */\nexport function getSupportedInputTypes(): Set<string> {\n  // Result is cached.\n  if (supportedInputTypes) {\n    return supportedInputTypes;\n  }\n\n  // We can't check if an input type is not supported until we're on the browser, so say that\n  // everything is supported when not on the browser. We don't use `Platform` here since it's\n  // just a helper function and can't inject it.\n  if (typeof document !== 'object' || !document) {\n    supportedInputTypes = new Set(candidateInputTypes);\n    return supportedInputTypes;\n  }\n\n  let featureTestInput = document.createElement('input');\n  supportedInputTypes = new Set(candidateInputTypes.filter(value => {\n    featureTestInput.setAttribute('type', value);\n    return featureTestInput.type === value;\n  }));\n\n  return supportedInputTypes;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\n\n@NgModule()\nexport class PlatformModule {}\n"]}