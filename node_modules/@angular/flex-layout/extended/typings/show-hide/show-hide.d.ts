/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { ElementRef, OnInit, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';
import { BaseDirective, MediaMonitor, StyleUtils } from '@angular/flex-layout/core';
import { Subscription } from 'rxjs';
import { LayoutDirective } from '@angular/flex-layout/flex';
/**
 * For fxHide selectors, we invert the 'value'
 * and assign to the equivalent fxShow selector cache
 *  - When 'hide' === '' === true, do NOT show the element
 *  - When 'hide' === false or 0... we WILL show the element
 */
import * as ɵngcc0 from '@angular/core';
export declare function negativeOf(hide: any): boolean;
/**
 * 'show' Layout API directive
 *
 */
export declare class ShowHideDirective extends BaseDirective implements OnInit, OnChanges, OnDestroy {
    protected layout: LayoutDirective;
    protected elRef: ElementRef;
    protected styleUtils: StyleUtils;
    protected platformId: Object;
    protected serverModuleLoaded: boolean;
    /**
     * Subscription to the parent flex container's layout changes.
     * Stored so we can unsubscribe when this directive is destroyed.
     */
    protected _layoutWatcher?: Subscription;
    /** Original dom Elements CSS display style */
    protected _display: string;
    show: string;
    showXs: string;
    showSm: string;
    showMd: string;
    showLg: string;
    showXl: string;
    showLtSm: string;
    showLtMd: string;
    showLtLg: string;
    showLtXl: string;
    showGtXs: string;
    showGtSm: string;
    showGtMd: string;
    showGtLg: string;
    hide: string;
    hideXs: string;
    hideSm: string;
    hideMd: string;
    hideLg: string;
    hideXl: string;
    hideLtSm: string;
    hideLtMd: string;
    hideLtLg: string;
    hideLtXl: string;
    hideGtXs: string;
    hideGtSm: string;
    hideGtMd: string;
    hideGtLg: string;
    constructor(monitor: MediaMonitor, layout: LayoutDirective, elRef: ElementRef, styleUtils: StyleUtils, platformId: Object, serverModuleLoaded: boolean);
    /**
     * Override accessor to the current HTMLElement's `display` style
     * Note: Show/Hide will not change the display to 'flex' but will set it to 'block'
     * unless it was already explicitly specified inline or in a CSS stylesheet.
     */
    protected _getDisplayStyle(): string;
    /**
     * On changes to any @Input properties...
     * Default to use the non-responsive Input value ('fxShow')
     * Then conditionally override with the mq-activated Input's current value
     */
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * After the initial onChanges, build an mqActivation object that bridges
     * mql change events to onMediaQueryChange handlers
     */
    ngOnInit(): void;
    ngOnDestroy(): void;
    /** Validate the visibility value and then update the host's inline display style */
    protected _updateWithValue(value?: string | number | boolean): void;
    /** Build the CSS that should be assigned to the element instance */
    protected _buildCSS(show: boolean): {
        'display': string;
    };
    /**  Validate the to be not FALSY */
    _validateTruthy(show?: string | number | boolean): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ShowHideDirective, [null, { optional: true; self: true; }, null, null, null, { optional: true; }]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ShowHideDirective, "  [fxShow],  [fxShow.xs], [fxShow.sm], [fxShow.md], [fxShow.lg], [fxShow.xl],  [fxShow.lt-sm], [fxShow.lt-md], [fxShow.lt-lg], [fxShow.lt-xl],  [fxShow.gt-xs], [fxShow.gt-sm], [fxShow.gt-md], [fxShow.gt-lg],  [fxHide],  [fxHide.xs], [fxHide.sm], [fxHide.md], [fxHide.lg], [fxHide.xl],  [fxHide.lt-sm], [fxHide.lt-md], [fxHide.lt-lg], [fxHide.lt-xl],  [fxHide.gt-xs], [fxHide.gt-sm], [fxHide.gt-md], [fxHide.gt-lg]", never, { "show": "fxShow"; "showXs": "fxShow.xs"; "showSm": "fxShow.sm"; "showMd": "fxShow.md"; "showLg": "fxShow.lg"; "showXl": "fxShow.xl"; "showLtSm": "fxShow.lt-sm"; "showLtMd": "fxShow.lt-md"; "showLtLg": "fxShow.lt-lg"; "showLtXl": "fxShow.lt-xl"; "showGtXs": "fxShow.gt-xs"; "showGtSm": "fxShow.gt-sm"; "showGtMd": "fxShow.gt-md"; "showGtLg": "fxShow.gt-lg"; "hide": "fxHide"; "hideXs": "fxHide.xs"; "hideSm": "fxHide.sm"; "hideMd": "fxHide.md"; "hideLg": "fxHide.lg"; "hideXl": "fxHide.xl"; "hideLtSm": "fxHide.lt-sm"; "hideLtMd": "fxHide.lt-md"; "hideLtLg": "fxHide.lt-lg"; "hideLtXl": "fxHide.lt-xl"; "hideGtXs": "fxHide.gt-xs"; "hideGtSm": "fxHide.gt-sm"; "hideGtMd": "fxHide.gt-md"; "hideGtLg": "fxHide.gt-lg"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvdy1oaWRlLmQudHMiLCJzb3VyY2VzIjpbInNob3ctaGlkZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5pbXBvcnQgeyBFbGVtZW50UmVmLCBPbkluaXQsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCYXNlRGlyZWN0aXZlLCBNZWRpYU1vbml0b3IsIFN0eWxlVXRpbHMgfSBmcm9tICdAYW5ndWxhci9mbGV4LWxheW91dC9jb3JlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgTGF5b3V0RGlyZWN0aXZlIH0gZnJvbSAnQGFuZ3VsYXIvZmxleC1sYXlvdXQvZmxleCc7XG4vKipcbiAqIEZvciBmeEhpZGUgc2VsZWN0b3JzLCB3ZSBpbnZlcnQgdGhlICd2YWx1ZSdcbiAqIGFuZCBhc3NpZ24gdG8gdGhlIGVxdWl2YWxlbnQgZnhTaG93IHNlbGVjdG9yIGNhY2hlXG4gKiAgLSBXaGVuICdoaWRlJyA9PT0gJycgPT09IHRydWUsIGRvIE5PVCBzaG93IHRoZSBlbGVtZW50XG4gKiAgLSBXaGVuICdoaWRlJyA9PT0gZmFsc2Ugb3IgMC4uLiB3ZSBXSUxMIHNob3cgdGhlIGVsZW1lbnRcbiAqL1xuZXhwb3J0IGRlY2xhcmUgZnVuY3Rpb24gbmVnYXRpdmVPZihoaWRlOiBhbnkpOiBib29sZWFuO1xuLyoqXG4gKiAnc2hvdycgTGF5b3V0IEFQSSBkaXJlY3RpdmVcbiAqXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFNob3dIaWRlRGlyZWN0aXZlIGV4dGVuZHMgQmFzZURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuICAgIHByb3RlY3RlZCBsYXlvdXQ6IExheW91dERpcmVjdGl2ZTtcbiAgICBwcm90ZWN0ZWQgZWxSZWY6IEVsZW1lbnRSZWY7XG4gICAgcHJvdGVjdGVkIHN0eWxlVXRpbHM6IFN0eWxlVXRpbHM7XG4gICAgcHJvdGVjdGVkIHBsYXRmb3JtSWQ6IE9iamVjdDtcbiAgICBwcm90ZWN0ZWQgc2VydmVyTW9kdWxlTG9hZGVkOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFN1YnNjcmlwdGlvbiB0byB0aGUgcGFyZW50IGZsZXggY29udGFpbmVyJ3MgbGF5b3V0IGNoYW5nZXMuXG4gICAgICogU3RvcmVkIHNvIHdlIGNhbiB1bnN1YnNjcmliZSB3aGVuIHRoaXMgZGlyZWN0aXZlIGlzIGRlc3Ryb3llZC5cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgX2xheW91dFdhdGNoZXI/OiBTdWJzY3JpcHRpb247XG4gICAgLyoqIE9yaWdpbmFsIGRvbSBFbGVtZW50cyBDU1MgZGlzcGxheSBzdHlsZSAqL1xuICAgIHByb3RlY3RlZCBfZGlzcGxheTogc3RyaW5nO1xuICAgIHNob3c6IHN0cmluZztcbiAgICBzaG93WHM6IHN0cmluZztcbiAgICBzaG93U206IHN0cmluZztcbiAgICBzaG93TWQ6IHN0cmluZztcbiAgICBzaG93TGc6IHN0cmluZztcbiAgICBzaG93WGw6IHN0cmluZztcbiAgICBzaG93THRTbTogc3RyaW5nO1xuICAgIHNob3dMdE1kOiBzdHJpbmc7XG4gICAgc2hvd0x0TGc6IHN0cmluZztcbiAgICBzaG93THRYbDogc3RyaW5nO1xuICAgIHNob3dHdFhzOiBzdHJpbmc7XG4gICAgc2hvd0d0U206IHN0cmluZztcbiAgICBzaG93R3RNZDogc3RyaW5nO1xuICAgIHNob3dHdExnOiBzdHJpbmc7XG4gICAgaGlkZTogc3RyaW5nO1xuICAgIGhpZGVYczogc3RyaW5nO1xuICAgIGhpZGVTbTogc3RyaW5nO1xuICAgIGhpZGVNZDogc3RyaW5nO1xuICAgIGhpZGVMZzogc3RyaW5nO1xuICAgIGhpZGVYbDogc3RyaW5nO1xuICAgIGhpZGVMdFNtOiBzdHJpbmc7XG4gICAgaGlkZUx0TWQ6IHN0cmluZztcbiAgICBoaWRlTHRMZzogc3RyaW5nO1xuICAgIGhpZGVMdFhsOiBzdHJpbmc7XG4gICAgaGlkZUd0WHM6IHN0cmluZztcbiAgICBoaWRlR3RTbTogc3RyaW5nO1xuICAgIGhpZGVHdE1kOiBzdHJpbmc7XG4gICAgaGlkZUd0TGc6IHN0cmluZztcbiAgICBjb25zdHJ1Y3Rvcihtb25pdG9yOiBNZWRpYU1vbml0b3IsIGxheW91dDogTGF5b3V0RGlyZWN0aXZlLCBlbFJlZjogRWxlbWVudFJlZiwgc3R5bGVVdGlsczogU3R5bGVVdGlscywgcGxhdGZvcm1JZDogT2JqZWN0LCBzZXJ2ZXJNb2R1bGVMb2FkZWQ6IGJvb2xlYW4pO1xuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlIGFjY2Vzc29yIHRvIHRoZSBjdXJyZW50IEhUTUxFbGVtZW50J3MgYGRpc3BsYXlgIHN0eWxlXG4gICAgICogTm90ZTogU2hvdy9IaWRlIHdpbGwgbm90IGNoYW5nZSB0aGUgZGlzcGxheSB0byAnZmxleCcgYnV0IHdpbGwgc2V0IGl0IHRvICdibG9jaydcbiAgICAgKiB1bmxlc3MgaXQgd2FzIGFscmVhZHkgZXhwbGljaXRseSBzcGVjaWZpZWQgaW5saW5lIG9yIGluIGEgQ1NTIHN0eWxlc2hlZXQuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIF9nZXREaXNwbGF5U3R5bGUoKTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIE9uIGNoYW5nZXMgdG8gYW55IEBJbnB1dCBwcm9wZXJ0aWVzLi4uXG4gICAgICogRGVmYXVsdCB0byB1c2UgdGhlIG5vbi1yZXNwb25zaXZlIElucHV0IHZhbHVlICgnZnhTaG93JylcbiAgICAgKiBUaGVuIGNvbmRpdGlvbmFsbHkgb3ZlcnJpZGUgd2l0aCB0aGUgbXEtYWN0aXZhdGVkIElucHV0J3MgY3VycmVudCB2YWx1ZVxuICAgICAqL1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEFmdGVyIHRoZSBpbml0aWFsIG9uQ2hhbmdlcywgYnVpbGQgYW4gbXFBY3RpdmF0aW9uIG9iamVjdCB0aGF0IGJyaWRnZXNcbiAgICAgKiBtcWwgY2hhbmdlIGV2ZW50cyB0byBvbk1lZGlhUXVlcnlDaGFuZ2UgaGFuZGxlcnNcbiAgICAgKi9cbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgLyoqIFZhbGlkYXRlIHRoZSB2aXNpYmlsaXR5IHZhbHVlIGFuZCB0aGVuIHVwZGF0ZSB0aGUgaG9zdCdzIGlubGluZSBkaXNwbGF5IHN0eWxlICovXG4gICAgcHJvdGVjdGVkIF91cGRhdGVXaXRoVmFsdWUodmFsdWU/OiBzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuKTogdm9pZDtcbiAgICAvKiogQnVpbGQgdGhlIENTUyB0aGF0IHNob3VsZCBiZSBhc3NpZ25lZCB0byB0aGUgZWxlbWVudCBpbnN0YW5jZSAqL1xuICAgIHByb3RlY3RlZCBfYnVpbGRDU1Moc2hvdzogYm9vbGVhbik6IHtcbiAgICAgICAgJ2Rpc3BsYXknOiBzdHJpbmc7XG4gICAgfTtcbiAgICAvKiogIFZhbGlkYXRlIHRoZSB0byBiZSBub3QgRkFMU1kgKi9cbiAgICBfdmFsaWRhdGVUcnV0aHkoc2hvdz86IHN0cmluZyB8IG51bWJlciB8IGJvb2xlYW4pOiBib29sZWFuO1xufVxuIl19