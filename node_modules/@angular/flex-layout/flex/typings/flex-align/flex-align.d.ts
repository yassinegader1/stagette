/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { ElementRef, OnInit, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';
import { BaseDirective, MediaMonitor, StyleUtils } from '@angular/flex-layout/core';
/**
 * 'flex-align' flexbox styling directive
 * Allows element-specific overrides for cross-axis alignments in a layout container
 * @see https://css-tricks.com/almanac/properties/a/align-self/
 */
import * as ɵngcc0 from '@angular/core';
export declare class FlexAlignDirective extends BaseDirective implements OnInit, OnChanges, OnDestroy {
    align: string;
    alignXs: string;
    alignSm: string;
    alignMd: string;
    alignLg: string;
    alignXl: string;
    alignLtSm: string;
    alignLtMd: string;
    alignLtLg: string;
    alignLtXl: string;
    alignGtXs: string;
    alignGtSm: string;
    alignGtMd: string;
    alignGtLg: string;
    constructor(monitor: MediaMonitor, elRef: ElementRef, styleUtils: StyleUtils);
    /**
     * For @Input changes on the current mq activation property, see onMediaQueryChanges()
     */
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * After the initial onChanges, build an mqActivation object that bridges
     * mql change events to onMediaQueryChange handlers
     */
    ngOnInit(): void;
    protected _updateWithValue(value?: string | number): void;
    protected _buildCSS(align?: string | number): {
        [key: string]: string | number;
    };
    static ɵfac: ɵngcc0.ɵɵFactoryDef<FlexAlignDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<FlexAlignDirective, "  [fxFlexAlign],  [fxFlexAlign.xs], [fxFlexAlign.sm], [fxFlexAlign.md], [fxFlexAlign.lg], [fxFlexAlign.xl],  [fxFlexAlign.lt-sm], [fxFlexAlign.lt-md], [fxFlexAlign.lt-lg], [fxFlexAlign.lt-xl],  [fxFlexAlign.gt-xs], [fxFlexAlign.gt-sm], [fxFlexAlign.gt-md], [fxFlexAlign.gt-lg]", never, { "align": "fxFlexAlign"; "alignXs": "fxFlexAlign.xs"; "alignSm": "fxFlexAlign.sm"; "alignMd": "fxFlexAlign.md"; "alignLg": "fxFlexAlign.lg"; "alignXl": "fxFlexAlign.xl"; "alignLtSm": "fxFlexAlign.lt-sm"; "alignLtMd": "fxFlexAlign.lt-md"; "alignLtLg": "fxFlexAlign.lt-lg"; "alignLtXl": "fxFlexAlign.lt-xl"; "alignGtXs": "fxFlexAlign.gt-xs"; "alignGtSm": "fxFlexAlign.gt-sm"; "alignGtMd": "fxFlexAlign.gt-md"; "alignGtLg": "fxFlexAlign.gt-lg"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxleC1hbGlnbi5kLnRzIiwic291cmNlcyI6WyJmbGV4LWFsaWduLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuaW1wb3J0IHsgRWxlbWVudFJlZiwgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQmFzZURpcmVjdGl2ZSwgTWVkaWFNb25pdG9yLCBTdHlsZVV0aWxzIH0gZnJvbSAnQGFuZ3VsYXIvZmxleC1sYXlvdXQvY29yZSc7XG4vKipcbiAqICdmbGV4LWFsaWduJyBmbGV4Ym94IHN0eWxpbmcgZGlyZWN0aXZlXG4gKiBBbGxvd3MgZWxlbWVudC1zcGVjaWZpYyBvdmVycmlkZXMgZm9yIGNyb3NzLWF4aXMgYWxpZ25tZW50cyBpbiBhIGxheW91dCBjb250YWluZXJcbiAqIEBzZWUgaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9hbG1hbmFjL3Byb3BlcnRpZXMvYS9hbGlnbi1zZWxmL1xuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBGbGV4QWxpZ25EaXJlY3RpdmUgZXh0ZW5kcyBCYXNlRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG4gICAgYWxpZ246IHN0cmluZztcbiAgICBhbGlnblhzOiBzdHJpbmc7XG4gICAgYWxpZ25TbTogc3RyaW5nO1xuICAgIGFsaWduTWQ6IHN0cmluZztcbiAgICBhbGlnbkxnOiBzdHJpbmc7XG4gICAgYWxpZ25YbDogc3RyaW5nO1xuICAgIGFsaWduTHRTbTogc3RyaW5nO1xuICAgIGFsaWduTHRNZDogc3RyaW5nO1xuICAgIGFsaWduTHRMZzogc3RyaW5nO1xuICAgIGFsaWduTHRYbDogc3RyaW5nO1xuICAgIGFsaWduR3RYczogc3RyaW5nO1xuICAgIGFsaWduR3RTbTogc3RyaW5nO1xuICAgIGFsaWduR3RNZDogc3RyaW5nO1xuICAgIGFsaWduR3RMZzogc3RyaW5nO1xuICAgIGNvbnN0cnVjdG9yKG1vbml0b3I6IE1lZGlhTW9uaXRvciwgZWxSZWY6IEVsZW1lbnRSZWYsIHN0eWxlVXRpbHM6IFN0eWxlVXRpbHMpO1xuICAgIC8qKlxuICAgICAqIEZvciBASW5wdXQgY2hhbmdlcyBvbiB0aGUgY3VycmVudCBtcSBhY3RpdmF0aW9uIHByb3BlcnR5LCBzZWUgb25NZWRpYVF1ZXJ5Q2hhbmdlcygpXG4gICAgICovXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQWZ0ZXIgdGhlIGluaXRpYWwgb25DaGFuZ2VzLCBidWlsZCBhbiBtcUFjdGl2YXRpb24gb2JqZWN0IHRoYXQgYnJpZGdlc1xuICAgICAqIG1xbCBjaGFuZ2UgZXZlbnRzIHRvIG9uTWVkaWFRdWVyeUNoYW5nZSBoYW5kbGVyc1xuICAgICAqL1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIF91cGRhdGVXaXRoVmFsdWUodmFsdWU/OiBzdHJpbmcgfCBudW1iZXIpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBfYnVpbGRDU1MoYWxpZ24/OiBzdHJpbmcgfCBudW1iZXIpOiB7XG4gICAgICAgIFtrZXk6IHN0cmluZ106IHN0cmluZyB8IG51bWJlcjtcbiAgICB9O1xufVxuIl19