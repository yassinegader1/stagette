{"version":3,"file":"progress-spinner.js","sources":["../../../src/lib/progress-spinner/progress-spinner.ts","../../../src/lib/progress-spinner/progress-spinner-module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Inject,\n  Input,\n  ElementRef,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @breaking-changes 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n"]}