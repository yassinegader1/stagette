{"version":3,"file":"button-toggle.js","sources":["../../../src/lib/button-toggle/button-toggle.ts","../../../src/lib/button-toggle/button-toggle-module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  Attribute,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {SelectionModel} from '@angular/cdk/collections';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 7.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  inputs: ['disabled'],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase implements\n  ControlValueAccessor, CanDisable, OnInit, AfterContentInit {\n\n  private _vertical = false;\n  private _multiple = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    // Clear out the native tabindex here since we forward it to the underlying button\n    '[attr.tabindex]': 'null',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n"]}