{"version":3,"file":"progress-bar.js","sources":["../../../src/lib/progress-bar/progress-bar.ts","../../../src/lib/progress-bar/progress-bar-module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  ViewEncapsulation,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  pathname: string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const pathname = (_document && _document.location && _document.location.pathname) || '';\n  return {pathname};\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n  constructor(public _elementRef: ElementRef,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n    // because named route URLs can contain parentheses (see #12338). Also we don't use\n    // `Location` from `@angular/common` since we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location && location.pathname ? location.pathname.split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n  }\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n"]}