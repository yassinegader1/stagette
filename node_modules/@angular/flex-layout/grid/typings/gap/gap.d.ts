/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { ElementRef, OnInit, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';
import { BaseDirective, MediaMonitor, StyleUtils } from '@angular/flex-layout/core';
/**
 * 'grid-gap' CSS Grid styling directive
 * Configures the gap between items in the grid
 * Syntax: <row gap> [<column-gap>]
 * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-17
 */
import * as ɵngcc0 from '@angular/core';
export declare class GridGapDirective extends BaseDirective implements OnInit, OnChanges, OnDestroy {
    align: string;
    alignXs: string;
    alignSm: string;
    alignMd: string;
    alignLg: string;
    alignXl: string;
    alignGtXs: string;
    alignGtSm: string;
    alignGtMd: string;
    alignGtLg: string;
    alignLtSm: string;
    alignLtMd: string;
    alignLtLg: string;
    alignLtXl: string;
    inline: string;
    constructor(monitor: MediaMonitor, elRef: ElementRef, styleUtils: StyleUtils);
    /**
     * For @Input changes on the current mq activation property, see onMediaQueryChanges()
     */
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * After the initial onChanges, build an mqActivation object that bridges
     * mql change events to onMediaQueryChange handlers
     */
    ngOnInit(): void;
    protected _updateWithValue(value?: string): void;
    protected _buildCSS(value?: string): {
        'display': string;
        'grid-gap': string;
    };
    static ɵfac: ɵngcc0.ɵɵFactoryDef<GridGapDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<GridGapDirective, "  [gdGap],  [gdGap.xs], [gdGap.sm], [gdGap.md], [gdGap.lg], [gdGap.xl],  [gdGap.lt-sm], [gdGap.lt-md], [gdGap.lt-lg], [gdGap.lt-xl],  [gdGap.gt-xs], [gdGap.gt-sm], [gdGap.gt-md], [gdGap.gt-lg]", never, { "align": "gdGap"; "alignXs": "gdGap.xs"; "alignSm": "gdGap.sm"; "alignMd": "gdGap.md"; "alignLg": "gdGap.lg"; "alignXl": "gdGap.xl"; "alignGtXs": "gdGap.gt-xs"; "alignGtSm": "gdGap.gt-sm"; "alignGtMd": "gdGap.gt-md"; "alignGtLg": "gdGap.gt-lg"; "alignLtSm": "gdGap.lt-sm"; "alignLtMd": "gdGap.lt-md"; "alignLtLg": "gdGap.lt-lg"; "alignLtXl": "gdGap.lt-xl"; "inline": "gdInline"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FwLmQudHMiLCJzb3VyY2VzIjpbImdhcC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmltcG9ydCB7IEVsZW1lbnRSZWYsIE9uSW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJhc2VEaXJlY3RpdmUsIE1lZGlhTW9uaXRvciwgU3R5bGVVdGlscyB9IGZyb20gJ0Bhbmd1bGFyL2ZsZXgtbGF5b3V0L2NvcmUnO1xuLyoqXG4gKiAnZ3JpZC1nYXAnIENTUyBHcmlkIHN0eWxpbmcgZGlyZWN0aXZlXG4gKiBDb25maWd1cmVzIHRoZSBnYXAgYmV0d2VlbiBpdGVtcyBpbiB0aGUgZ3JpZFxuICogU3ludGF4OiA8cm93IGdhcD4gWzxjb2x1bW4tZ2FwPl1cbiAqIEBzZWUgaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9zbmlwcGV0cy9jc3MvY29tcGxldGUtZ3VpZGUtZ3JpZC8jYXJ0aWNsZS1oZWFkZXItaWQtMTdcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgR3JpZEdhcERpcmVjdGl2ZSBleHRlbmRzIEJhc2VEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcbiAgICBhbGlnbjogc3RyaW5nO1xuICAgIGFsaWduWHM6IHN0cmluZztcbiAgICBhbGlnblNtOiBzdHJpbmc7XG4gICAgYWxpZ25NZDogc3RyaW5nO1xuICAgIGFsaWduTGc6IHN0cmluZztcbiAgICBhbGlnblhsOiBzdHJpbmc7XG4gICAgYWxpZ25HdFhzOiBzdHJpbmc7XG4gICAgYWxpZ25HdFNtOiBzdHJpbmc7XG4gICAgYWxpZ25HdE1kOiBzdHJpbmc7XG4gICAgYWxpZ25HdExnOiBzdHJpbmc7XG4gICAgYWxpZ25MdFNtOiBzdHJpbmc7XG4gICAgYWxpZ25MdE1kOiBzdHJpbmc7XG4gICAgYWxpZ25MdExnOiBzdHJpbmc7XG4gICAgYWxpZ25MdFhsOiBzdHJpbmc7XG4gICAgaW5saW5lOiBzdHJpbmc7XG4gICAgY29uc3RydWN0b3IobW9uaXRvcjogTWVkaWFNb25pdG9yLCBlbFJlZjogRWxlbWVudFJlZiwgc3R5bGVVdGlsczogU3R5bGVVdGlscyk7XG4gICAgLyoqXG4gICAgICogRm9yIEBJbnB1dCBjaGFuZ2VzIG9uIHRoZSBjdXJyZW50IG1xIGFjdGl2YXRpb24gcHJvcGVydHksIHNlZSBvbk1lZGlhUXVlcnlDaGFuZ2VzKClcbiAgICAgKi9cbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBBZnRlciB0aGUgaW5pdGlhbCBvbkNoYW5nZXMsIGJ1aWxkIGFuIG1xQWN0aXZhdGlvbiBvYmplY3QgdGhhdCBicmlkZ2VzXG4gICAgICogbXFsIGNoYW5nZSBldmVudHMgdG8gb25NZWRpYVF1ZXJ5Q2hhbmdlIGhhbmRsZXJzXG4gICAgICovXG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgX3VwZGF0ZVdpdGhWYWx1ZSh2YWx1ZT86IHN0cmluZyk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIF9idWlsZENTUyh2YWx1ZT86IHN0cmluZyk6IHtcbiAgICAgICAgJ2Rpc3BsYXknOiBzdHJpbmc7XG4gICAgICAgICdncmlkLWdhcCc6IHN0cmluZztcbiAgICB9O1xufVxuIl19